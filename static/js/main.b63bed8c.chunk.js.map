{"version":3,"sources":["Algorithms/UnweightedSearchAlgorithms.js","Images/arrow_right.jpg","Images/circle.png","Components/GridSquare.jsx","Images/gear.png","Components/NavBar.jsx","Algorithms/WeightedSearchAlgorithms.js","Components/Settings.jsx","Components/Grid.jsx","Components/PopupWarning.jsx","App.js","reportWebVitals.js","index.js"],"names":["visited","previousNode","Square","this","props","x","y","id","handleClick","className","drag","drop","isStart","isEnd","weight","dragAndDropUpdate","onClick","src","right_arrow","draggable","onDragStart","event","alt","title","circle","onDrop","Promise","resolve","then","value","error","console","log","onDragOver","preventDefault","React","Component","NavigationBar","changeAlgorithm","changeGrid","generateNewGrid","clearWeightsAndWalls","Nav","justify","style","width","fill","variant","onSelect","eventKey","Item","Link","NavDropdown","algorithm","$","fadeIn","gear","resetVisited","grid","i","push","j","isWall","resetPreviousNode","active","Settings","speed","button","document","getElementsByClassName","classList","replace","changeSpeed","temp","fadeOut","Table","borderless","responsive","gridRows","gridCols","unweightedStartNodeX","unweightedStartNodeY","unweightedEndNodeX","unweightedEndNodeY","weightedStartNodeX","weightedStartNodeY","weightedEndNodeX","weightedEndNodeY","Grid","state","mainGrid","unweightedGrid","weightedGrid","currGrid","setState","has","length","newGrid","slice","css","path","startX","startY","endX","endY","queue","currentNode","shift","bfs","stateGrid","setTimeout","addClass","drawUnweightedShortestPath","stack","pop","dfs","q","node","sort","a","b","dijkstra","drawWeightedShortestPath","Math","abs","astar","shortestPath","currX","currY","unweightedShortestPath","attr","pointerEvents","currNode","weightedShortestPath","resetGrid","animateBFS","animateDFS","animateDijkstra","animateAstar","key","type","random","trunc","e","data","JSON","parse","dataTransfer","getData","sY","substring","indexOf","sX","eY","eX","nodeClass","String","includes","align","visualizeAlgorithm","generateRandomGrid","map","row","target","parentNode","setData","stringify","stringEndId","parseInt","appendChild","getElementById","Popup","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b63bed8c.chunk.js","sourcesContent":["var visited;\r\nvar previousNode;\r\n\r\nconst rows = 25;\r\nconst cols = 72;\r\n\r\n// Breadth first search\r\nexport function bfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let queue = [];\r\n    queue.push([startX, startY]);\r\n    while (!!queue.length) {\r\n        let currentNode = queue.shift();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= cols || currentNode[1] >= rows || visited[currentNode[1]][currentNode[0]] === true) {\r\n            continue;\r\n        }\r\n\r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n\r\n        // return the path if the end node was found\r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        queue.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// Depth first search\r\nexport function dfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let stack = [];\r\n    stack.push([startX, startY]);\r\n    while (!!stack.length) {\r\n        let currentNode = stack.pop();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= cols || currentNode[1] >= rows || visited[currentNode[1]][currentNode[0]]) {\r\n            continue;\r\n        }\r\n        \r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n        \r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        stack.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// returns the path the algorithm took to reach the end node\r\nexport function unweightedShortestPath(startX, startY, endX, endY, path) {\r\n    // do not do anything if the end node was not found in the search\r\n    if (!visited[endY][endX]) {\r\n        return [];\r\n    }\r\n    let currX = path[path.length - 1][0], currY = path[path.length - 1][1];\r\n    let shortestPath = [];\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        let temp = [currX, currY];\r\n        currX = previousNode[temp[1]][temp[0]][0];\r\n        currY = previousNode[temp[1]][temp[0]][1];\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction resetVisited(grid) {\r\n    // function to allow algorithms to have a visited array\r\n    visited = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            if (grid[i][j].isWall) {\r\n                visited[i].push(true);\r\n            } else {\r\n                visited[i].push(false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction resetPreviousNode() {\r\n    previousNode = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/arrow_right.91c92c08.jpg\";","export default __webpack_public_path__ + \"static/media/circle.abb2dcd5.png\";","import React from \"react\";\r\nimport right_arrow from \"../Images/arrow_right.jpg\";\r\nimport circle from \"../Images/circle.png\";\r\n\r\nexport default class Square extends React.Component {\r\n  render() {\r\n    const {\r\n      x,\r\n      y,\r\n      id,\r\n      handleClick,\r\n      className,\r\n      drag,\r\n      drop,\r\n      isStart,\r\n      isEnd,\r\n      weight,\r\n      dragAndDropUpdate,\r\n    } = this.props;\r\n\r\n    if (isStart) {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          weight={weight}\r\n        >\r\n          <img\r\n            src={right_arrow}\r\n            draggable={true}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id=\"start\"\r\n            alt=\"start\"\r\n            title=\"Start\"\r\n          />\r\n        </div>\r\n      );\r\n    } else if (isEnd) {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          weight={weight}\r\n        >\r\n          <img\r\n            src={circle}\r\n            draggable={true}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id=\"end\"\r\n            alt=\"end\"\r\n            title=\"End\"\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          onDrop={(event) => {\r\n            let promise = new Promise(function (resolve) {\r\n              dragAndDropUpdate(id, event);\r\n              resolve(event);\r\n            });\r\n\r\n            promise.then(\r\n              function (value) {\r\n                drop(value);\r\n              },\r\n              function (error) {\r\n                console.log(error);\r\n              }\r\n            );\r\n          }}\r\n          onDragOver={(event) => event.preventDefault()}\r\n          weight={weight}\r\n        >\r\n          {weight === null || weight === 0 ? \"\" : weight}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gear.8ecc30fe.png\";","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport gear from \"../Images/gear.png\";\r\n\r\nexport default class NavigationBar extends React.Component {\r\n  render() {\r\n    const {\r\n      changeAlgorithm,\r\n      changeGrid,\r\n      onClick,\r\n      generateNewGrid,\r\n      clearWeightsAndWalls,\r\n    } = this.props;\r\n    return (\r\n      <Nav\r\n        justify\r\n        id=\"nav\"\r\n        style={{ width: 100 + \"%\" }}\r\n        fill=\"true\"\r\n        variant=\"pills\"\r\n        onSelect={(eventKey) => {\r\n          changeAlgorithm(eventKey);\r\n        }}\r\n      >\r\n        <Nav.Item>\r\n          <Nav.Link className=\"nav-title\">Algorithm Visualizer</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <NavDropdown title=\"Unweighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"BFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Breadth First Search\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"DFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Depth First Search\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <button className=\"navbar-btn\" onClick={onClick}>\r\n          Visualize\r\n          {this.props.algorithm == null ? \"\" : \" \" + this.props.algorithm}!\r\n        </button>\r\n\r\n        <NavDropdown title=\"Weighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"Dijkstra's\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            Dijkstra's\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"A*\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            A*\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <Nav.Item\r\n          onClick={() => {\r\n            generateNewGrid();\r\n          }}\r\n        >\r\n          <Nav.Link>Generate random grid</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item\r\n          onClick={() => {\r\n            clearWeightsAndWalls();\r\n          }}\r\n        >\r\n          <Nav.Link>Clear walls/weights</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          {/* Blank space to seperate settings from algorithms */}\r\n        </Nav.Item>\r\n\r\n        <button\r\n          id=\"settings-btn\"\r\n          onClick={() => {\r\n            $(\"#settings-bg\").fadeIn(150);\r\n          }}\r\n        >\r\n          <img src={gear} alt=\"settings\" id=\"gear\" />\r\n        </button>\r\n      </Nav>\r\n    );\r\n  }\r\n}\r\n","const rows = 25;\r\nconst cols = 72;\r\n\r\nvar visited;\r\nvar previousNode;\r\n\r\nexport function dijkstra(grid, startX, startY, endX, endY) {\r\n    // reset visited grid and previousNode grid\r\n    resetVisited();\r\n    resetPreviousNode();\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null, null, 0]);\r\n    while (!!q.length) {\r\n        let node = q.shift();\r\n        if (visited[node[1]][[node[0]]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[node[1]][node[0]] = true;\r\n        path.push([node[0], node[1], node[2], node[3]]);\r\n\r\n        if (node[2] != null && previousNode[node[1]][node[0]] === null) {\r\n            previousNode[node[1]][node[0]] = [node[2], node[3]];\r\n        }\r\n\r\n        if (node[0] === endX && node[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        // pushing second and third element to allow backtracking to highlight the shortest path\r\n        if (node[0] + 1 < cols) {\r\n            q.push([node[0] + 1, node[1], node[0], node[1]]);\r\n        }\r\n\r\n        if (node[0] - 1 >= 0) {\r\n            q.push([node[0] - 1, node[1], node[0], node[1]]);\r\n        }\r\n\r\n        if (node[1] + 1 < rows) {\r\n            q.push([node[0], node[1] + 1, node[0], node[1]]);\r\n        }\r\n\r\n        if (node[1] - 1 >= 0) {\r\n            q.push([node[0], node[1] - 1, node[0], node[1]]);\r\n        }\r\n\r\n        // sort queue to get the next neighbor with the least weight\r\n        q.sort((a, b) => {\r\n            return grid[a[1]][a[0]].weight - grid[b[1]][b[0]].weight;\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function astar (grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited();\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null, null, 0]);\r\n\r\n    while (!!q.length) {\r\n        let node = q.shift();\r\n        if (visited[node[1]][node[0]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[node[1]][node[0]] = true;\r\n        path.push([node[0], node[1], node[2], node[3]]);\r\n        if (node[2] != null && previousNode[node[1]][node[0]] === null) {\r\n            previousNode[node[1]][node[0]] = [node[2], node[3]];\r\n        }\r\n        \r\n        if (node[0] === endX && node[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n\r\n        if (node[0] + 1 < cols) {\r\n            q.push([node[0] + 1, node[1], node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[0] - 1 >= 0) {\r\n            q.push([node[0] - 1, node[1], node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[1] + 1 < rows) {\r\n            q.push([node[0], node[1] + 1, node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[1] - 1 >= 0) {\r\n            q.push([node[0], node[1] - 1, node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        // sort by path weight and manhatten distance\r\n        q.sort((a, b) => {\r\n            return (a[4] + (Math.abs(a[1] - endY) + Math.abs(a[0] - endX))) - (b[4] + (Math.abs(b[1] - endY) + Math.abs(b[0] - endX)));\r\n        });\r\n    }\r\n}\r\n\r\n// function that will return the shortest path\r\nexport function weightedShortestPath(startX, startY, path) {\r\n    let currX = path[path.length - 1][2], currY = path[path.length - 1][3];\r\n    let shortestPath = [];\r\n\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        if (previousNode[currY][currX] === null) {\r\n            break;\r\n        }\r\n\r\n        let currNode = [currX, currY];\r\n        currX = previousNode[currNode[1]][currNode[0]][0];\r\n        currY = previousNode[currNode[1]][currNode[0]][1];\r\n\r\n    }\r\n    return shortestPath;\r\n}\r\n\r\n// method that re initializes the visited \r\nfunction resetVisited() {\r\n    visited = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            visited[i].push(false);\r\n        }\r\n    }\r\n}\r\n\r\n// function to reset grid that helps with finding the shortest path\r\nfunction resetPreviousNode() {\r\n    previousNode = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nvar active = 1;\r\n\r\nexport default class Settings extends React.Component {\r\n  changeSpeed(speed, button) {\r\n    document\r\n      .getElementsByClassName(\"speed-btn\")\r\n      [button].classList.replace(\"inactive\", \"active\");\r\n    document\r\n      .getElementsByClassName(\"speed-btn\")\r\n      [active].classList.replace(\"active\", \"inactive\");\r\n\r\n    this.props.changeSpeed(speed);\r\n\r\n    // swap the active button\r\n    let temp = active;\r\n    active = button;\r\n    button = temp;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"settings-bg\">\r\n        <div id=\"settings\">\r\n          <span\r\n            id=\"settings-close\"\r\n            onClick={() => {\r\n              $(\"#settings-bg\").fadeOut(150);\r\n            }}\r\n          >\r\n            &times;\r\n          </span>\r\n          <Table borderless responsive=\"lg\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Speed</th>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn inactive\"\r\n                    onClick={() => this.changeSpeed(\"slow\", 0)}\r\n                  >\r\n                    Slow\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn active\"\r\n                    onClick={() => this.changeSpeed(\"med\", 1)}\r\n                  >\r\n                    Medium\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn inactive\"\r\n                    onClick={() => this.changeSpeed(\"fast\", 2)}\r\n                  >\r\n                    Fast\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport $ from \"jquery\";\r\nimport Square from \"./GridSquare\";\r\nimport NavigationBar from \"./NavBar\";\r\n\r\nimport {\r\n  bfs,\r\n  dfs,\r\n  unweightedShortestPath,\r\n} from \"../Algorithms/UnweightedSearchAlgorithms\";\r\nimport {\r\n  dijkstra,\r\n  astar,\r\n  weightedShortestPath,\r\n} from \"../Algorithms/WeightedSearchAlgorithms\";\r\nimport Settings from \"./Settings\";\r\n\r\nconst gridRows = 25;\r\nconst gridCols = 72;\r\n\r\nvar unweightedStartNodeX = 5;\r\nvar unweightedStartNodeY = 12;\r\nvar unweightedEndNodeX = 66;\r\nvar unweightedEndNodeY = 12;\r\n\r\nvar weightedStartNodeX = 5;\r\nvar weightedStartNodeY = 12;\r\nvar weightedEndNodeX = 66;\r\nvar weightedEndNodeY = 12;\r\n\r\nexport default class Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mainGrid: [],\r\n      unweightedGrid: [],\r\n      weightedGrid: [],\r\n      currGrid: \"unweighted\",\r\n      algorithm: null,\r\n      speed: 20,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // initialize grid\r\n    let grid = [];\r\n    for (let i = 0; i < gridRows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < gridCols; j++) {\r\n        let isStart, isEnd;\r\n        let className;\r\n        if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          isWall: false,\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          weight: null,\r\n          className: className,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ unweightedGrid: grid });\r\n    // set main grid to unweighted grid\r\n    this.setState({ mainGrid: grid });\r\n\r\n    // initialize weighted grid\r\n    grid = [];\r\n    for (let i = 0; i < gridRows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < gridCols; j++) {\r\n        let isStart, isEnd;\r\n        let className;\r\n        if (i === weightedStartNodeY && j === weightedStartNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          className: className,\r\n          weight: 0,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ weightedGrid: grid });\r\n  }\r\n\r\n  handleClick(x, y) {\r\n    if ($(\"#\" + y + \"-\" + x).has(\"img\").length === 1) {\r\n      return;\r\n    }\r\n\r\n    let newGrid = this.state.mainGrid.slice();\r\n\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      newGrid[y][x] = {\r\n        ...newGrid[y][x],\r\n        isWall: !newGrid[y][x].isWall,\r\n        className: newGrid[y][x].isWall\r\n          ? \"grid-square unselected\"\r\n          : \"grid-square selected\",\r\n      };\r\n    } else {\r\n      newGrid[y][x] = {\r\n        ...newGrid[y][x],\r\n        weight: newGrid[y][x].weight + 1 === 5 ? 0 : newGrid[y][x].weight + 1,\r\n      };\r\n    }\r\n    this.setState({ mainGrid: newGrid });\r\n  }\r\n\r\n  ///////////////////////////// algorithm animations /////////////////////////////\r\n\r\n  /********************* Unweighted algorithms *********************/\r\n  animateBFS(grid) {\r\n    $(\".grid\").css(\"pointer-events\", \"none\");\r\n    const path = bfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n    let stateGrid = this.state.mainGrid;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        $(\"#\" + id).addClass(\"visited\");\r\n        stateGrid[path[i][1]][path[i][0]].className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      $(\".grid\").css(\"pointer-events\", \"auto\");\r\n      this.drawUnweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n      this.setState({ mainGrid: stateGrid });\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateDFS(grid) {\r\n    $(\".grid\").css(\"pointer-events\", \"none\");\r\n    const path = dfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n    let stateGrid = this.state.mainGrid;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        $(\"#\" + id).addClass(\"visited\");\r\n        stateGrid[path[i][1]][path[i][0]].className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n    setTimeout(() => {\r\n      $(\".grid\").css(\"pointer-events\", \"auto\");\r\n      this.drawUnweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n      this.setState({ mainGrid: stateGrid });\r\n    }, path.length * speed);\r\n  }\r\n\r\n  /********************* Weighted algorithms *********************/\r\n\r\n  animateDijkstra(grid) {\r\n    $(\".grid\").css(\"pointer-events\", \"none\");\r\n    const path = dijkstra(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n    let stateGrid = this.state.mainGrid;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        $(\"#\" + id).addClass(\"visited\");\r\n        stateGrid[path[i][1]][path[i][0]].className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      $(\".grid\").css(\"pointer-events\", \"auto\");\r\n      this.drawWeightedShortestPath(\r\n        weightedEndNodeX,\r\n        weightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n      this.setState({ mainGrid: stateGrid });\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateAstar(grid) {\r\n    $(\".grid\").css(\"pointer-events\", \"none\");\r\n    const path = astar(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n\r\n    let speed = this.state.speed;\r\n    let stateGrid = this.state.mainGrid;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        $(\"#\" + id).addClass(\"visited\");\r\n        stateGrid[path[i][1]][path[i][0]].className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      $(\".grid\").css(\"pointer-events\", \"auto\");\r\n      this.drawWeightedShortestPath(\r\n        weightedEndNodeX,\r\n        weightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n      this.setState({ mainGrid: stateGrid });\r\n    }, speed * path.length);\r\n  }\r\n\r\n  /////////////////// draw paths //////////////////////////\r\n\r\n  drawUnweightedShortestPath(\r\n    unweightedStartNodeX,\r\n    unweightedStartNodeY,\r\n    unweightedEndNodeX,\r\n    unweightedEndNodeY,\r\n    speed,\r\n    path\r\n  ) {\r\n    let grid = this.state.mainGrid;\r\n    const shortestPath = unweightedShortestPath(\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY,\r\n      path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n        $(\"#\" + id).attr(\"class\", \"grid-square shortestpath\")\r\n        grid[shortestPath[i][1]][shortestPath[i][0]].className =\r\n          \"grid-square shortestpath\";\r\n      }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      this.setState({ mainGrid: grid });\r\n    }, speed * shortestPath.length * 2);\r\n  }\r\n\r\n  drawWeightedShortestPath(\r\n    weightedStartNodeX,\r\n    weightedStartNodeY,\r\n    speed,\r\n    path\r\n  ) {\r\n    let grid = this.state.mainGrid;\r\n    const shortestPath = weightedShortestPath(\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n        $(\"#\" + id).attr(\"class\", \"grid-square shortestpath\")\r\n        grid[shortestPath[i][1]][shortestPath[i][0]].className =\r\n          \"grid-square shortestpath\";\r\n      }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      this.setState({ mainGrid: grid });\r\n    }, shortestPath.length * speed * 2);\r\n  }\r\n\r\n  /////////////////// visualize button function //////////////////////////\r\n  visualizeAlgorithm() {\r\n    this.resetGrid();\r\n    const { algorithm, mainGrid } = this.state;\r\n    switch (algorithm) {\r\n      case \"BFS\":\r\n        this.animateBFS(mainGrid);\r\n        break;\r\n      case \"DFS\":\r\n        this.animateDFS(mainGrid);\r\n        break;\r\n      case \"Dijkstra's\":\r\n        this.animateDijkstra(mainGrid);\r\n        break;\r\n      case \"A*\":\r\n        this.animateAstar(mainGrid);\r\n        break;\r\n      default:\r\n        $(\"#popup\").fadeIn(150);\r\n        break;\r\n    }\r\n  }\r\n\r\n  changeAlgorithm(key) {\r\n    this.setState({ algorithm: key });\r\n  }\r\n\r\n  changeSpeed(speed) {\r\n    if (speed === \"slow\") {\r\n      this.setState({ speed: 30 });\r\n    } else if (speed === \"med\") {\r\n      this.setState({ speed: 20 });\r\n    } else {\r\n      this.setState({ speed: 10 });\r\n    }\r\n  }\r\n\r\n  changeGrid(type) {\r\n    this.resetGrid();\r\n    if (type === \"weighted\" && this.state.currGrid === \"unweighted\") {\r\n      this.setState({\r\n        currGrid: \"weighted\",\r\n        unweightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.weightedGrid,\r\n      });\r\n    } else if (type === \"unweighted\" && this.state.currGrid === \"weighted\") {\r\n      this.setState({\r\n        currGrid: \"unweighted\",\r\n        weightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.unweightedGrid,\r\n      });\r\n    }\r\n  }\r\n\r\n  generateRandomGrid() {\r\n    let grid = this.state.mainGrid.slice();\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (\r\n            (i === unweightedStartNodeY && j === unweightedStartNodeX) ||\r\n            (i === unweightedEndNodeY && j === unweightedEndNodeX)\r\n          ) {\r\n            continue;\r\n          }\r\n          grid[i][j].isWall = Math.random() * 5 > 4;\r\n          grid[i][j].className = grid[i][j].isWall\r\n            ? \"grid-square selected\"\r\n            : \"grid-square unselected\";\r\n        }\r\n      }\r\n      this.setState({ mainGrid: grid });\r\n    } else {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (\r\n            (i === weightedStartNodeY && j === weightedStartNodeX) ||\r\n            (i === weightedEndNodeY && j === weightedEndNodeX)\r\n          ) {\r\n            grid[i][j].weight = 0;\r\n            continue;\r\n          }\r\n          grid[i][j].weight = Math.trunc(Math.random() * 5);\r\n        }\r\n      }\r\n      this.setState({ mainGrid: grid });\r\n    }\r\n  }\r\n\r\n  clearWeightsAndWalls() {\r\n    let grid = [];\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < gridCols; j++) {\r\n          let isStart, isEnd;\r\n          let className;\r\n          if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n            isStart = true;\r\n            className = \"grid-square start\";\r\n          } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n            isEnd = true;\r\n            className = \"grid-square end\";\r\n          } else {\r\n            className = \"grid-square unselected\";\r\n          }\r\n          grid[i].push({\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isWall: false,\r\n            isStart: isStart,\r\n            isEnd: isEnd,\r\n            weight: null,\r\n            className: className,\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < gridCols; j++) {\r\n          let isStart, isEnd;\r\n          let className;\r\n          if (i === weightedStartNodeY && j === weightedStartNodeX) {\r\n            isStart = true;\r\n            className = \"grid-square start\";\r\n          } else if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n            isEnd = true;\r\n            className = \"grid-square end\";\r\n          } else {\r\n            className = \"grid-square unselected\";\r\n          }\r\n          grid[i].push({\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isStart: isStart,\r\n            isEnd: isEnd,\r\n            className: className,\r\n            weight: 0,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    this.setState({ mainGrid: grid });\r\n  }\r\n\r\n  dragAndDropUpdate(id, e) {\r\n    let newGrid = this.state.mainGrid.slice();\r\n    let data = JSON.parse(e.dataTransfer.getData(\"data\"));\r\n\r\n    // eX = endX, eY = endY\r\n\r\n    let sY = data[1].substring(0, data[1].indexOf(\"-\"));\r\n    let sX = data[1].substring(data[1].indexOf(\"-\") + 1, data[1].length);\r\n    let eY = id.substring(0, id.indexOf(\"-\"));\r\n    let eX = id.substring(id.indexOf(\"-\") + 1, id.length);\r\n\r\n    if (data[0] === \"start\") {\r\n      newGrid[sY][sX].isStart = false;\r\n      newGrid[eY][eX].isStart = true;\r\n\r\n      newGrid[sY][sX].className = \"grid-square unselected\";\r\n      newGrid[eY][eX].className = \"grid-square start\";\r\n    } else {\r\n      newGrid[sY][sX].isEnd = false;\r\n      newGrid[eY][eX].isEnd = true;\r\n\r\n      newGrid[sY][sX].className = \"grid-square unselected\";\r\n      newGrid[eY][eX].className = \"grid-square end\";\r\n    }\r\n\r\n    if (newGrid[eY][eX].isWall) {\r\n      newGrid[eY][eX].isWall = false;\r\n    }\r\n\r\n    if (this.state.currGrid === \"weighted\") {\r\n      newGrid[eY][eX].weight = 0;\r\n    }\r\n\r\n    this.setState({ mainGrid: newGrid });\r\n  }\r\n\r\n  resetGrid() {\r\n    let grid = this.state.mainGrid;\r\n    for (let i = 0; i < gridRows; i++) {\r\n      for (let j = 0; j < gridCols; j++) {\r\n        // set visited nodes to blank nodes\r\n        let nodeClass = String(grid[i][j].className);\r\n        if (\r\n          nodeClass.includes(\"visited\") ||\r\n          nodeClass.includes(\"shortestpath\")\r\n        ) {\r\n          grid[i][j].className = \"grid-square unselected\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({ mainGrid: grid });\r\n  }\r\n\r\n  /////////////////// Render ///////////////////\r\n  render() {\r\n    const { mainGrid } = this.state;\r\n    return (\r\n      <div className=\"grid\" align=\"center\">\r\n        <Settings changeSpeed={(speed) => this.changeSpeed(speed)} />\r\n        <NavigationBar\r\n          onClick={() => this.visualizeAlgorithm()}\r\n          changeAlgorithm={(key) => this.changeAlgorithm(key)}\r\n          changeGrid={(type) => this.changeGrid(type)}\r\n          algorithm={this.state.algorithm}\r\n          generateNewGrid={() => this.generateRandomGrid()}\r\n          clearWeightsAndWalls={() => this.clearWeightsAndWalls()}\r\n        />\r\n        {mainGrid.map((row, key) => {\r\n          return (\r\n            <div className=\"grid-row\" key={key}>\r\n              {row.map((node, key) => {\r\n                return (\r\n                  <Square\r\n                    {...node}\r\n                    handleClick={(j, i) => this.handleClick(j, i)}\r\n                    drag={drag()}\r\n                    drop={drop(node.id, this.state.currGrid)}\r\n                    key={key}\r\n                    dragAndDropUpdate={(e, id) => this.dragAndDropUpdate(e, id)}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// JavaScript functions\r\n\r\n// drag and drop functions\r\nconst drag = () => (e) => {\r\n  let data = [e.target.id, e.target.parentNode.id];\r\n  e.dataTransfer.setData(\"data\", JSON.stringify(data));\r\n};\r\n\r\nconst drop = (id, grid) => (e) => {\r\n  e.preventDefault();\r\n  let data = JSON.parse(e.dataTransfer.getData(\"data\"));\r\n\r\n  // stringEndId represents the node where data is being dropped\r\n\r\n  let stringEndId = String(id);\r\n  let y = parseInt(stringEndId.substring(0, stringEndId.indexOf(\"-\")));\r\n  let x = parseInt(\r\n    stringEndId.substring(stringEndId.indexOf(\"-\") + 1, stringEndId.length)\r\n  );\r\n  e.target.appendChild(document.getElementById(data[0]));\r\n\r\n  if (grid === \"unweighted\") {\r\n    if (data[0] === \"start\") {\r\n      unweightedStartNodeX = x;\r\n      unweightedStartNodeY = y;\r\n    } else {\r\n      unweightedEndNodeX = x;\r\n      unweightedEndNodeY = y;\r\n    }\r\n  } else {\r\n    if (data[0] === \"start\") {\r\n      weightedStartNodeX = x;\r\n      weightedStartNodeY = y;\r\n    } else {\r\n      weightedEndNodeX = x;\r\n      weightedEndNodeY = y;\r\n    }\r\n  }\r\n};","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nexport default class Popup extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"popup\">\r\n        <div id=\"popup-text\">\r\n          You have not selected an algorithm\r\n          <span\r\n            id=\"close\"\r\n            onClick={() => {\r\n              $(\"#popup\").fadeOut(150);\r\n            }}\r\n          >\r\n            &times;\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import './App.css';\n\nimport Grid from './Components/Grid';\nimport Popup from \"./Components/PopupWarning\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Popup />\n      <Grid/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}