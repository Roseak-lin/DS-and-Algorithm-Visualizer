{"version":3,"sources":["Algorithms/UnweightedSearchAlgorithms.js","Images/arrow_right.jpg","Images/circle.png","Components/GridSquare.jsx","Images/gear.png","Components/NavBar.jsx","Algorithms/WeightedSearchAlgorithms.js","Grid-Functions/PathDrawing.js","Components/Settings.jsx","Components/Grid.jsx","Components/PopupWarning.jsx","App.js","reportWebVitals.js","index.js"],"names":["visited","previousNode","Square","this","props","x","y","className","id","handleClick","isStart","isEnd","drag","drop","weight","src","right_arrow","draggable","onDragStart","event","alt","title","circle","onClick","onDrop","onDragOver","preventDefault","React","Component","NavigationBar","changeAlgorithm","changeGrid","generateNewGrid","clearWeightsAndWalls","Nav","justify","style","width","fill","variant","onSelect","eventKey","Item","Link","NavDropdown","algorithm","displaySettings","gear","document","getElementById","display","resetVisited","grid","i","push","j","isWall","resetPreviousNode","drawWeightedShortestPath","weightedStartNodeX","weightedStartNodeY","speed","path","getElementsByClassName","pointerEvents","shortestPath","startX","startY","currX","length","currY","currNode","weightedShortestPath","setTimeout","drawUnweightedShortestPath","unweightedStartNodeX","unweightedStartNodeY","unweightedEndNodeX","unweightedEndNodeY","endX","endY","temp","unweightedShortestPath","active","Settings","button","classList","replace","changeSpeed","console","log","close","Table","borderless","responsive","gridRows","gridCols","weightedEndNodeX","weightedEndNodeY","Grid","state","mainGrid","unweightedGrid","weightedGrid","currGrid","visualizeAlgorithm","bind","setState","newGrid","slice","node","newSquare","queue","currentNode","shift","bfs","stack","pop","dfs","q","sort","a","b","dijkstra","Math","abs","astar","resetGrid","animateBFS","animateDFS","animateDijkstra","animateAstar","key","type","appendChild","random","trunc","align","generateRandomGrid","map","row","contains","e","data","target","dataTransfer","setData","JSON","stringify","parse","getData","stringStartId","String","stringEndId","parseInt","substring","indexOf","Popup","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c9c48b0e.chunk.js","sourcesContent":["var visited;\r\nvar previousNode;\r\n\r\nconst rows = 25;\r\nconst cols = 72;\r\n\r\n// Breadth first search\r\nexport function bfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let queue = [];\r\n    queue.push([startX, startY]);\r\n    while (!!queue.length) {\r\n        let currentNode = queue.shift();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= cols || currentNode[1] >= rows || visited[currentNode[1]][currentNode[0]] === true) {\r\n            continue;\r\n        }\r\n\r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n\r\n        // return the path if the end node was found\r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        queue.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// Depth first search\r\nexport function dfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let stack = [];\r\n    stack.push([startX, startY]);\r\n    while (!!stack.length) {\r\n        let currentNode = stack.pop();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= cols || currentNode[1] >= rows || visited[currentNode[1]][currentNode[0]]) {\r\n            continue;\r\n        }\r\n        \r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n        \r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        stack.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// returns the path the algorithm took to reach the end node\r\nexport function unweightedShortestPath(startX, startY, endX, endY, path) {\r\n    // do not do anything if the end node was not found in the search\r\n    if (!visited[endY][endX]) {\r\n        return [];\r\n    }\r\n    let currX = path[path.length - 1][0], currY = path[path.length - 1][1];\r\n    let shortestPath = [];\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        let temp = [currX, currY];\r\n        currX = previousNode[temp[1]][temp[0]][0];\r\n        currY = previousNode[temp[1]][temp[0]][1];\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction resetVisited(grid) {\r\n    // function to allow algorithms to have a visited array\r\n    visited = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            if (grid[i][j].isWall) {\r\n                visited[i].push(true);\r\n            } else {\r\n                visited[i].push(false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction resetPreviousNode() {\r\n    previousNode = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/arrow_right.91c92c08.jpg\";","export default __webpack_public_path__ + \"static/media/circle.abb2dcd5.png\";","import React from \"react\";\r\nimport right_arrow from \"../Images/arrow_right.jpg\";\r\nimport circle from \"../Images/circle.png\";\r\n\r\nexport default class Square extends React.Component {\r\n  render() {\r\n    const {\r\n      x,\r\n      y,\r\n      className,\r\n      id,\r\n      handleClick,\r\n      isStart,\r\n      isEnd,\r\n      drag,\r\n      drop,\r\n      weight,\r\n    } = this.props;\r\n\r\n    if (isStart) {\r\n      return (\r\n        <div className={className} id={id}>\r\n          <img\r\n            src={right_arrow}\r\n            draggable={true}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id=\"start\"\r\n            alt=\"start\"\r\n            title=\"Start\"\r\n          />\r\n        </div>\r\n      );\r\n    } else if (isEnd) {\r\n      return (\r\n        <div className={className} id={id}>\r\n          <img\r\n            src={circle}\r\n            draggable={true}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id=\"end\"\r\n            alt=\"end\"\r\n            title=\"End\"\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          onDrop={(event) => {\r\n            drop(event);\r\n          }}\r\n          onDragOver={(event) => event.preventDefault()}\r\n          weight={weight}\r\n        >\r\n          {weight === null || weight === 0 ? \"\" : weight}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gear.8ecc30fe.png\";","import React from \"react\";\r\n\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport gear from \"../Images/gear.png\";\r\n\r\nexport default class NavigationBar extends React.Component {\r\n  render() {\r\n    const {\r\n      changeAlgorithm,\r\n      changeGrid,\r\n      onClick,\r\n      generateNewGrid,\r\n      clearWeightsAndWalls,\r\n    } = this.props;\r\n    return (\r\n      <Nav\r\n        justify\r\n        id=\"nav\"\r\n        style={{ width: 100 + \"%\" }}\r\n        fill=\"true\"\r\n        variant=\"pills\"\r\n        onSelect={(eventKey) => {\r\n          changeAlgorithm(eventKey);\r\n        }}\r\n      >\r\n        <Nav.Item>\r\n          <Nav.Link className=\"nav-title\">Algorithm Visualizer</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <NavDropdown title=\"Unweighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"BFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Breadth First Search\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"DFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Depth First Search\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <button className=\"navbar-btn\" onClick={onClick}>\r\n          Visualize\r\n          {this.props.algorithm == null ? \"\" : \" \" + this.props.algorithm}!\r\n        </button>\r\n\r\n        <NavDropdown title=\"Weighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"Dijkstra's\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            Dijkstra's\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"A*\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            A*\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <Nav.Item\r\n          onClick={() => {\r\n            generateNewGrid();\r\n          }}\r\n        >\r\n          <Nav.Link>Generate random grid</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item\r\n          onClick={() => {\r\n            clearWeightsAndWalls();\r\n          }}\r\n        >\r\n          <Nav.Link>Clear walls/weights</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          {/* Blank space to seperate settings from algorithms */}\r\n        </Nav.Item>\r\n\r\n        <button id=\"settings-btn\" onClick={displaySettings}>\r\n          <img src={gear} alt=\"settings\" id=\"gear\" />\r\n        </button>\r\n      </Nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst displaySettings = () => {\r\n  document.getElementById(\"settings-bg\").style.display = \"block\";\r\n};\r\n","const rows = 25;\r\nconst cols = 72;\r\n\r\nvar visited;\r\nvar previousNode;\r\n\r\nexport function dijkstra(grid, startX, startY, endX, endY) {\r\n    // reset visited grid and previousNode grid\r\n    resetVisited();\r\n    resetPreviousNode();\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null, null, 0]);\r\n    while (!!q.length) {\r\n        let node = q.shift();\r\n        if (visited[node[1]][[node[0]]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[node[1]][node[0]] = true;\r\n        path.push([node[0], node[1], node[2], node[3]]);\r\n\r\n        if (node[2] != null && previousNode[node[1]][node[0]] === null) {\r\n            previousNode[node[1]][node[0]] = [node[2], node[3]];\r\n        }\r\n\r\n        if (node[0] === endX && node[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        // pushing second and third element to allow backtracking to highlight the shortest path\r\n        if (node[0] + 1 < cols) {\r\n            q.push([node[0] + 1, node[1], node[0], node[1]]);\r\n        }\r\n\r\n        if (node[0] - 1 >= 0) {\r\n            q.push([node[0] - 1, node[1], node[0], node[1]]);\r\n        }\r\n\r\n        if (node[1] + 1 < rows) {\r\n            q.push([node[0], node[1] + 1, node[0], node[1]]);\r\n        }\r\n\r\n        if (node[1] - 1 >= 0) {\r\n            q.push([node[0], node[1] - 1, node[0], node[1]]);\r\n        }\r\n\r\n        // sort queue to get the next neighbor with the least weight\r\n        q.sort((a, b) => {\r\n            return grid[a[1]][a[0]].weight - grid[b[1]][b[0]].weight;\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function astar (grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited();\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null, null, 0]);\r\n\r\n    while (!!q.length) {\r\n        let node = q.shift();\r\n        if (visited[node[1]][node[0]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[node[1]][node[0]] = true;\r\n        path.push([node[0], node[1], node[2], node[3]]);\r\n        if (node[2] != null && previousNode[node[1]][node[0]] === null) {\r\n            previousNode[node[1]][node[0]] = [node[2], node[3]];\r\n        }\r\n        \r\n        if (node[0] === endX && node[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n\r\n        if (node[0] + 1 < cols) {\r\n            q.push([node[0] + 1, node[1], node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[0] - 1 >= 0) {\r\n            q.push([node[0] - 1, node[1], node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[1] + 1 < rows) {\r\n            q.push([node[0], node[1] + 1, node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[1] - 1 >= 0) {\r\n            q.push([node[0], node[1] - 1, node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        // sort by path weight and manhatten distance\r\n        q.sort((a, b) => {\r\n            return (a[4] + (Math.abs(a[1] - endY) + Math.abs(a[0] - endX))) - (b[4] + (Math.abs(b[1] - endY) + Math.abs(b[0] - endX)));\r\n        });\r\n    }\r\n}\r\n\r\n// function that will return the shortest path\r\nexport function weightedShortestPath(startX, startY, path) {\r\n    let currX = path[path.length - 1][2], currY = path[path.length - 1][3];\r\n    let shortestPath = [];\r\n\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        if (previousNode[currY][currX] === null) {\r\n            break;\r\n        }\r\n\r\n        let currNode = [currX, currY];\r\n        currX = previousNode[currNode[1]][currNode[0]][0];\r\n        currY = previousNode[currNode[1]][currNode[0]][1];\r\n\r\n    }\r\n    return shortestPath;\r\n}\r\n\r\n// method that re initializes the visited \r\nfunction resetVisited() {\r\n    visited = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            visited[i].push(false);\r\n        }\r\n    }\r\n}\r\n\r\n// function to reset grid that helps with finding the shortest path\r\nfunction resetPreviousNode() {\r\n    previousNode = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","import { unweightedShortestPath } from \"../Algorithms/UnweightedSearchAlgorithms\"\r\nimport { weightedShortestPath } from \"../Algorithms/WeightedSearchAlgorithms\"\r\n\r\nexport function drawWeightedShortestPath(weightedStartNodeX, weightedStartNodeY, speed, path) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const shortestPath = weightedShortestPath(\r\n        weightedStartNodeX,\r\n        weightedStartNodeY,\r\n        path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n        setTimeout(() => {\r\n            let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n            document.getElementById(id).className = \"grid-square shortestpath\";\r\n        }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n        document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n    }, shortestPath.length * speed * 2);\r\n}\r\n\r\nexport function drawUnweightedShortestPath(unweightedStartNodeX, unweightedStartNodeY, unweightedEndNodeX, unweightedEndNodeY, speed, path) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const shortestPath = unweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n        setTimeout(() => {\r\n            let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n            document.getElementById(id).className = \"grid-square shortestpath\";\r\n        }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n        document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n    }, speed * shortestPath.length * 2);\r\n}","import React from \"react\";\r\n\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nvar active = 1;\r\n\r\nexport default class Settings extends React.Component {\r\n  close() {\r\n    document.getElementById(\"settings-bg\").style.display = \"none\";\r\n  }\r\n\r\n  changeSpeed(speed, button) {\r\n    document\r\n      .getElementsByClassName(\"speed-btn\")\r\n      [button].classList.replace(\"inactive\", \"active\");\r\n    document.getElementsByClassName(\"speed-btn\")[active].classList.replace(\"active\", \"inactive\");\r\n    \r\n    this.props.changeSpeed(speed);\r\n    console.log(speed + \" \" + button);\r\n    \r\n    // swap the active button\r\n    let temp = active;\r\n    active = button;\r\n    button = temp;\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"settings-bg\">\r\n        <div id=\"settings\">\r\n          <span id=\"settings-close\" onClick={this.close}>\r\n            &times;\r\n          </span>\r\n          <Table borderless responsive=\"lg\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Speed</th>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn inactive\"\r\n                    onClick={() => this.changeSpeed(\"slow\", 0)}\r\n                  >\r\n                    Slow\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn active\"\r\n                    onClick={() => this.changeSpeed(\"med\", 1)}\r\n                  >\r\n                    Medium\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn inactive\"\r\n                    onClick={() => this.changeSpeed(\"fast\", 2)}\r\n                  >\r\n                    Fast\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./GridSquare\";\r\nimport NavigationBar from \"./NavBar\";\r\n\r\nimport { bfs, dfs } from \"../Algorithms/UnweightedSearchAlgorithms\";\r\nimport { dijkstra, astar } from \"../Algorithms/WeightedSearchAlgorithms\";\r\nimport {\r\n  drawUnweightedShortestPath,\r\n  drawWeightedShortestPath,\r\n} from \"../Grid-Functions/PathDrawing\";\r\nimport Settings from \"./Settings\";\r\n\r\nconst gridRows = 25;\r\nconst gridCols = 72;\r\n\r\nvar unweightedStartNodeX = 5;\r\nvar unweightedStartNodeY = 12;\r\nvar unweightedEndNodeX = 66;\r\nvar unweightedEndNodeY = 12;\r\n\r\nvar weightedStartNodeX = 5;\r\nvar weightedStartNodeY = 12;\r\nvar weightedEndNodeX = 66;\r\nvar weightedEndNodeY = 12;\r\n\r\nexport default class Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mainGrid: [],\r\n      unweightedGrid: [],\r\n      weightedGrid: [],\r\n      currGrid: \"unweighted\",\r\n      algorithm: null,\r\n      speed: 20,\r\n    };\r\n\r\n    this.visualizeAlgorithm = this.visualizeAlgorithm.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // initialize grid\r\n    let grid = [];\r\n    for (let i = 0; i < gridRows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < gridCols; j++) {\r\n        let isStart = i === unweightedStartNodeY && j === unweightedStartNodeX,\r\n          isEnd = i === unweightedEndNodeY && j === unweightedEndNodeX,\r\n          className;\r\n        if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          isWall: false,\r\n          weight: null,\r\n          className: className,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ unweightedGrid: grid });\r\n    // set main grid to unweighted grid\r\n    this.setState({ mainGrid: grid });\r\n\r\n    // initialize weighted grid\r\n    grid = [];\r\n    for (let i = 0; i < gridRows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < gridCols; j++) {\r\n        let isStart = i === weightedStartNodeY && j === weightedStartNodeX,\r\n          isEnd = i === weightedEndNodeY && j === weightedEndNodeX,\r\n          className;\r\n        if (i === weightedStartNodeY && j === weightedStartNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          className: className,\r\n          weight: 0,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ weightedGrid: grid });\r\n  }\r\n\r\n  handleClick(x, y) {\r\n    if (\r\n      (x === unweightedStartNodeX && y === unweightedStartNodeY) ||\r\n      (x === unweightedEndNodeX && y === unweightedEndNodeY)\r\n    ) {\r\n      return;\r\n    }\r\n    let newGrid = this.state.mainGrid.slice();\r\n    let node = newGrid[y][x];\r\n\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      const newSquare = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n        className: node.isWall\r\n          ? \"grid-square unselected\"\r\n          : \"grid-square selected\",\r\n      };\r\n      newGrid[y][x] = newSquare;\r\n    } else {\r\n      const newSquare = {\r\n        ...node,\r\n        weight: node.weight + 1 === 5 ? 0 : node.weight + 1,\r\n      };\r\n      newGrid[y][x] = newSquare;\r\n    }\r\n    this.setState({ mainGrid: newGrid });\r\n  }\r\n\r\n  ///////////////////////////// algorithm animations //////////////////////////////////////////////\r\n\r\n  /********************* Unweighted algorithms *********************/\r\n  animateBFS(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = bfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      drawUnweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateDFS(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = dfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      drawUnweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n    }, path.length * speed);\r\n  }\r\n\r\n  /********************* Weighted algorithms *********************/\r\n  animateDijkstra(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = dijkstra(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      drawWeightedShortestPath(weightedEndNodeX, weightedEndNodeY, speed, path);\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateAstar(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = astar(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      drawWeightedShortestPath(weightedEndNodeX, weightedEndNodeY, speed, path);\r\n    }, speed * path.length);\r\n  }\r\n\r\n  /////////////////// visualize button function //////////////////////////\r\n  visualizeAlgorithm() {\r\n    resetGrid();\r\n    const { algorithm, mainGrid } = this.state;\r\n    switch (algorithm) {\r\n      case \"BFS\":\r\n        this.animateBFS(mainGrid);\r\n        break;\r\n      case \"DFS\":\r\n        this.animateDFS(mainGrid);\r\n        break;\r\n      case \"Dijkstra's\":\r\n        this.animateDijkstra(mainGrid);\r\n        break;\r\n      case \"A*\":\r\n        this.animateAstar(mainGrid);\r\n        break;\r\n      default:\r\n        document.getElementById(\"popup\").style.display = \"block\";\r\n        break;\r\n    }\r\n  }\r\n\r\n  changeAlgorithm(key) {\r\n    this.setState({ algorithm: key });\r\n  }\r\n\r\n  changeSpeed(speed) {\r\n\r\n    if (speed === \"slow\") {\r\n      this.setState({ speed: 30 });\r\n    } else if (speed === \"med\") {\r\n      this.setState({ speed: 20 });\r\n    } else {\r\n      this.setState({ speed: 10 });\r\n    }\r\n  }\r\n\r\n  changeGrid(type) {\r\n    resetGrid();\r\n    if (type === \"weighted\" && this.state.currGrid === \"unweighted\") {\r\n      document\r\n        .getElementById(unweightedStartNodeY + \"-\" + unweightedStartNodeX)\r\n        .classList.replace(\"start\", \"unselected\");\r\n      document\r\n        .getElementById(unweightedEndNodeY + \"-\" + unweightedEndNodeX)\r\n        .classList.replace(\"end\", \"unselected\");\r\n      document\r\n        .getElementById(weightedStartNodeY + \"-\" + weightedStartNodeX)\r\n        .appendChild(document.getElementById(\"start\"));\r\n      document\r\n        .getElementById(weightedEndNodeY + \"-\" + weightedEndNodeX)\r\n        .appendChild(document.getElementById(\"end\"));\r\n\r\n      this.setState({\r\n        unweightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.weightedGrid,\r\n        currGrid: \"weighted\",\r\n      });\r\n    } else if (type === \"unweighted\" && this.state.currGrid === \"weighted\") {\r\n      document\r\n        .getElementById(weightedStartNodeY + \"-\" + weightedStartNodeX)\r\n        .classList.replace(\"start\", \"unselected\");\r\n      document\r\n        .getElementById(weightedEndNodeY + \"-\" + weightedEndNodeX)\r\n        .classList.replace(\"end\", \"unselected\");\r\n      document\r\n        .getElementById(unweightedStartNodeY + \"-\" + unweightedStartNodeX)\r\n        .appendChild(document.getElementById(\"start\"));\r\n      document\r\n        .getElementById(unweightedEndNodeY + \"-\" + unweightedEndNodeX)\r\n        .appendChild(document.getElementById(\"end\"));\r\n\r\n      this.setState({\r\n        weightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.unweightedGrid,\r\n        currGrid: \"unweighted\",\r\n      });\r\n    }\r\n  }\r\n\r\n  generateRandomGrid() {\r\n    let grid = this.state.mainGrid.slice();\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (\r\n            (i === unweightedStartNodeY && j === unweightedStartNodeX) ||\r\n            (i === unweightedEndNodeY && j === unweightedEndNodeX)\r\n          ) {\r\n            continue;\r\n          }\r\n          grid[i][j].isWall = Math.random() * 5 > 4;\r\n          grid[i][j].className = grid[i][j].isWall\r\n            ? \"grid-square selected\"\r\n            : \"grid-square unselected\";\r\n        }\r\n      }\r\n      if (this.state.currGrid === \"unweighted\") {\r\n        this.setState({ mainGrid: grid });\r\n      } else {\r\n        this.setState({ unweightedGrid: grid });\r\n      }\r\n    } else {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n            grid[i][j].weight = 0;\r\n            continue;\r\n          }\r\n          grid[i][j].weight = Math.trunc(Math.random() * 5);\r\n        }\r\n      }\r\n      if (this.state.currGrid === \"weighted\") {\r\n        this.setState({ mainGrid: grid });\r\n      } else {\r\n        this.setState({ weightedGrid: grid });\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWeightsAndWalls() {\r\n    let grid = [];\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < gridCols; j++) {\r\n          let isStart =\r\n              i === unweightedStartNodeY && j === unweightedStartNodeX,\r\n            isEnd = i === unweightedEndNodeY && j === unweightedEndNodeX,\r\n            className;\r\n          if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n            isStart = true;\r\n            className = \"grid-square start\";\r\n          } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n            isEnd = true;\r\n            className = \"grid-square end\";\r\n          } else {\r\n            className = \"grid-square unselected\";\r\n          }\r\n          grid[i].push({\r\n            isStart: isStart,\r\n            isEnd: isEnd,\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isWall: false,\r\n            weight: 0,\r\n            className: className,\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < gridCols; j++) {\r\n          let isStart =\r\n              i === unweightedStartNodeY && j === unweightedStartNodeX,\r\n            isEnd = i === unweightedEndNodeY && j === unweightedEndNodeX,\r\n            className;\r\n          if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n            isStart = true;\r\n            className = \"grid-square start\";\r\n          } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n            isEnd = true;\r\n            className = \"grid-square end\";\r\n          } else {\r\n            className = \"grid-square unselected\";\r\n          }\r\n          grid[i].push({\r\n            isStart: isStart,\r\n            isEnd: isEnd,\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isWall: false,\r\n            weight: null,\r\n            className: className,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    this.setState({ mainGrid: grid });\r\n  }\r\n\r\n  // Render ///////////////////////////////////////////////////\r\n  render() {\r\n    const { mainGrid } = this.state;\r\n    return (\r\n      <div className=\"grid\" align=\"center\">\r\n        <Settings changeSpeed={(speed) => this.changeSpeed(speed)} />\r\n        <NavigationBar\r\n          onClick={this.visualizeAlgorithm}\r\n          changeAlgorithm={(key) => this.changeAlgorithm(key)}\r\n          changeGrid={(type) => this.changeGrid(type)}\r\n          algorithm={this.state.algorithm}\r\n          generateNewGrid={() => this.generateRandomGrid()}\r\n          clearWeightsAndWalls={() => this.clearWeightsAndWalls()}\r\n        />\r\n        {mainGrid.map((row, key) => {\r\n          return (\r\n            <div className=\"grid-row\" key={key}>\r\n              {row.map((node, key) => {\r\n                return (\r\n                  <Square\r\n                    {...node}\r\n                    handleClick={(j, i) => this.handleClick(j, i)}\r\n                    drag={drag(node.id)}\r\n                    drop={drop(node.id, this.state.currGrid)}\r\n                    key={key}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// JavaScript functions\r\n\r\nconst resetGrid = () => {\r\n  for (let i = 0; i < gridRows; i++) {\r\n    for (let j = 0; j < gridCols; j++) {\r\n      // set visited nodes to blank nodes\r\n      let node = document.getElementById(i + \"-\" + j);\r\n      if (\r\n        node.classList.contains(\"visited\") ||\r\n        node.classList.contains(\"shortestpath\")\r\n      ) {\r\n        node.className = \"grid-square unselected\";\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// drag and drop functions\r\nconst drag = (id) => (e) => {\r\n  let data = [e.target.id, id];\r\n  e.dataTransfer.setData(\"data\", JSON.stringify(data));\r\n};\r\n\r\nconst drop = (id, grid) => (e) => {\r\n  e.preventDefault();\r\n  let data = JSON.parse(e.dataTransfer.getData(\"data\"));\r\n  let stringStartId = String(data[1]),\r\n    stringEndId = String(id);\r\n  e.target.appendChild(document.getElementById(data[0]));\r\n  let y = parseInt(stringEndId.substring(0, stringEndId.indexOf(\"-\"))),\r\n    x = parseInt(\r\n      stringEndId.substring(stringEndId.indexOf(\"-\") + 1, stringEndId.length)\r\n    );\r\n\r\n  if (grid === \"unweighted\") {\r\n    if (data[0] === \"start\") {\r\n      unweightedStartNodeX = x;\r\n      unweightedStartNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square start\";\r\n    } else {\r\n      unweightedEndNodeX = x;\r\n      unweightedEndNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square end\";\r\n    }\r\n    document\r\n      .getElementById(stringStartId)\r\n      .classList.replace(\"end\", \"unselected\");\r\n  } else {\r\n    if (data[0] === \"start\") {\r\n      weightedStartNodeX = x;\r\n      weightedStartNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square start\";\r\n    } else {\r\n      weightedEndNodeX = x;\r\n      weightedEndNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square end\";\r\n    }\r\n    document\r\n      .getElementById(stringStartId)\r\n      .classList.replace(\"end\", \"unselected\");\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nexport default class Popup extends React.Component {\r\n\r\n  onClick() {\r\n    document.getElementById(\"popup\").style.display = \"none\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"popup\">\r\n        <div id=\"popup-text\">\r\n          You have not selected an algorithm <span id=\"close\" onClick={this.onClick}>&times;</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import './App.css';\n\nimport Grid from './Components/Grid';\nimport Popup from \"./Components/PopupWarning\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Popup />\n      <Grid/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}