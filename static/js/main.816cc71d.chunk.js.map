{"version":3,"sources":["Algorithms/SearchAlgorithms.js","Components/GridSquare.jsx","Components/Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["visited","Square","this","props","x","y","className","id","onClick","React","Component","bfs","grid","startX","startY","endX","endY","i","push","j","isWall","initializeVisited","path","queue","length","currentNode","shift","Grid","state","animateBFS","bind","isStart","isEnd","setState","newGrid","slice","node","newSquare","setTimeout","document","getElementById","align","map","row","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.816cc71d.chunk.js","sourcesContent":["let visited;\r\n\r\nexport function bfs(grid, startX, startY, endX, endY) {\r\n    initializeVisited(grid);\r\n    let path = [];\r\n    let queue = [];\r\n    queue.push([startX, startY]);\r\n    while (!!queue.length) {\r\n        let currentNode = queue.shift();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= 72 || currentNode[1] >= 15 || visited[currentNode[1]][currentNode[0]] === true) {\r\n            continue;\r\n        }\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n        queue.push([currentNode[0] + 1, currentNode[1]]);\r\n        queue.push([currentNode[0] - 1, currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] + 1]);\r\n        queue.push([currentNode[0], currentNode[1] - 1]);\r\n    }\r\n    return path;\r\n}\r\n\r\nfunction initializeVisited(grid) {\r\n    visited = [];\r\n    for (let i = 0; i < 15; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < 72; j++) {\r\n            if (grid[i][j].isWall) {\r\n                visited[i].push(true);\r\n            } else {\r\n                visited[i].push(false);\r\n            }\r\n        }\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class Square extends React.Component {\r\n\r\n  render() {\r\n    const {x, y, className, id, onClick} = this.props;\r\n    return (\r\n      <div\r\n        className={className}\r\n        onClick={() => onClick(x, y)}\r\n        id={id}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./GridSquare\";\r\nimport { bfs } from \"../Algorithms/SearchAlgorithms\";\r\n\r\nvar startNodeX = 5;\r\nvar startNodeY = 7;\r\nvar endNodeX = 60;\r\nvar endNodeY = 7;\r\n\r\nexport default class Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n    };\r\n    this.animateBFS = this.animateBFS.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = [];\r\n    for (let i = 0; i < 15; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < 72; j++) {\r\n        let isStart = i === startNodeY && j === startNodeX,\r\n          isEnd = i === endNodeY && j === endNodeX,\r\n          className;\r\n        if (i === startNodeY && j === startNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === endNodeY && j === endNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          isWall: false,\r\n          onClick: (j, i) => this.onClick(j, i),\r\n          className: className,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  onClick(x, y) {\r\n    if (\r\n      (x === startNodeX && y === startNodeY) ||\r\n      (x === endNodeX && y === endNodeY)\r\n    ) {\r\n      return;\r\n    }\r\n    let newGrid = this.state.grid.slice();\r\n    const node = newGrid[y][x];\r\n    const newSquare = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n      className: node.isWall\r\n        ? \"grid-square unselected\"\r\n        : \"grid-square selected\",\r\n    };\r\n    newGrid[y][x] = newSquare;\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  animateBFS() {\r\n    const path = bfs(\r\n      this.state.grid,\r\n      startNodeX,\r\n      startNodeY,\r\n      endNodeX,\r\n      endNodeY\r\n    );\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        const id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"grid\" align=\"center\">\r\n        {grid.map((row, key) => {\r\n          return (\r\n            <div className=\"grid-row\" key={key}>\r\n              {row.map((node, key) => {\r\n                return <Square {...node} key={key} />;\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n        <button onClick={this.animateBFS}>BFS</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import './App.css';\nimport Grid from './Components/Grid';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}