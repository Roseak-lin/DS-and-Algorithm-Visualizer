{"version":3,"sources":["MainPage/HomeScreen.module.css","Algo/AlgoVisualizer.module.css","DS's/DataStructures.module.css","Algo/Algorithms/UnweightedSearchAlgorithms.js","reportWebVitals.js","MainPage/HomeScreen.jsx","Algo/Images/arrow_right.jpg","Algo/Images/circle.png","Algo/Components/GridSquare.jsx","Algo/Images/gear.png","Algo/Components/NavBar.jsx","Algo/Algorithms/WeightedSearchAlgorithms.js","Algo/Components/Settings.jsx","Algo/Components/Grid.jsx","Algo/Components/PopupWarning.jsx","Algo/AlgoVisualizer.js","DS's/Components/Toolbar.jsx","DS's/Components/NavBar.jsx","DS's/Components/Visualizer.jsx","DS's/DataStructures.js","index.js"],"names":["module","exports","visited","previousNode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","HomeScreen","parent","document","querySelector","home","splitscreen","leftPanel","left","botPanel","right","content","addEventListener","style","width","window","innerWidth","location","href","className","pageHeader","headerText","panel","title","React","Component","Square","this","props","x","y","id","handleClick","drag","drop","isStart","isEnd","weight","dragAndDropUpdate","onClick","src","right_arrow","draggable","onDragStart","event","algo","start","alt","circle","end","onDrop","Promise","resolve","value","error","console","log","onDragOver","preventDefault","NavigationBar","changeAlgorithm","changeGrid","generateNewGrid","clearWeightsAndWalls","Nav","justify","fill","variant","onSelect","eventKey","Item","Link","NavDropdown","navbar_btn","algorithm","settings_btn","$","settings_bg","fadeIn","gear","resetVisited","grid","i","push","j","isWall","resetPreviousNode","active","Settings","speed","button","getElementsByClassName","classList","replace","inactive","changeSpeed","temp","target","fadeOut","settings","settings_close","Table","borderless","responsive","gridRows","gridCols","unweightedStartNodeX","unweightedStartNodeY","unweightedEndNodeX","unweightedEndNodeY","weightedStartNodeX","weightedStartNodeY","weightedEndNodeX","weightedEndNodeY","Grid","state","mainGrid","unweightedGrid","weightedGrid","currGrid","grid_square","unselected","setState","has","length","newGrid","slice","selected","css","path","startX","startY","endX","endY","queue","currentNode","shift","bfs","stateGrid","setTimeout","addClass","drawUnweightedShortestPath","stack","pop","dfs","q","node","sort","a","b","dijkstra","drawWeightedShortestPath","Math","abs","astar","shortestPath","currX","currY","unweightedShortestPath","attr","shortestpath","currNode","weightedShortestPath","resetGrid","animateBFS","animateDFS","animateDijkstra","animateAstar","key","type","random","trunc","e","data","JSON","parse","dataTransfer","getData","sY","substring","indexOf","sX","eY","eX","nodeClass","String","includes","align","visualizeAlgorithm","generateRandomGrid","map","row","grid_row","parentNode","setData","stringify","stringEndId","parseInt","appendChild","getElementById","Popup","popup","popup_text","close","App","Toolbar","each","index","element","animate","functions","forEach","ds","toolbar","placeholder","maxLength","NavBar","defaultActiveKey","onchange","DSVisualizer","behavior","structure","handleChange","btns","add","remove","enqueue","dequeue","DataStructures","DS","ReactDOM","render","exact","component","MainPage","AlgoVisualizer"],"mappings":"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","file":"static/js/main.cdd364af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageHeader\":\"HomeScreen_pageHeader__1rMfE\",\"splitscreen\":\"HomeScreen_splitscreen__1YthU\",\"panel\":\"HomeScreen_panel__Y8jXD\",\"content\":\"HomeScreen_content__16-X-\",\"title\":\"HomeScreen_title__3z7m7\",\"right\":\"HomeScreen_right__3zJqi\",\"left\":\"HomeScreen_left__244-Q\",\"h2\":\"HomeScreen_h2__2X1O3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"AlgoVisualizer_grid__3HaUU\",\"grid_row\":\"AlgoVisualizer_grid_row__3FgLe\",\"grid_square\":\"AlgoVisualizer_grid_square__2Em8L\",\"popup\":\"AlgoVisualizer_popup__1AG2f\",\"popup_text\":\"AlgoVisualizer_popup_text__WnjmW\",\"close\":\"AlgoVisualizer_close__3QkKp\",\"selected\":\"AlgoVisualizer_selected__2Eow0\",\"unselected\":\"AlgoVisualizer_unselected__YB43-\",\"start\":\"AlgoVisualizer_start__3q-2-\",\"end\":\"AlgoVisualizer_end__35VuV\",\"visited\":\"AlgoVisualizer_visited__3jBGY\",\"visit_square\":\"AlgoVisualizer_visit_square__22aOj\",\"shortestpath\":\"AlgoVisualizer_shortestpath__2goPl\",\"nav\":\"AlgoVisualizer_nav__2My1k\",\"navbar_btn\":\"AlgoVisualizer_navbar_btn___fTwr\",\"settings_btn\":\"AlgoVisualizer_settings_btn__5a2NL\",\"gear\":\"AlgoVisualizer_gear__zkI2U\",\"rotate-gear\":\"AlgoVisualizer_rotate-gear__YUSXL\",\"settings_bg\":\"AlgoVisualizer_settings_bg__LQa_Y\",\"settings\":\"AlgoVisualizer_settings__2urUI\",\"settings_close\":\"AlgoVisualizer_settings_close__1KiaY\",\"inactive\":\"AlgoVisualizer_inactive__1WDOL\",\"active\":\"AlgoVisualizer_active__1cKr8\",\"popup-animation\":\"AlgoVisualizer_popup-animation__31Rgp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DS\":\"DataStructures_DS__1Drix\",\"DSVisualizer\":\"DataStructures_DSVisualizer__3okgg\",\"toolbar\":\"DataStructures_toolbar__2I6ed\"};","var visited;\r\nvar previousNode;\r\n\r\nconst rows = 25;\r\nconst cols = 72;\r\n\r\n// Breadth first search\r\nexport function bfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let queue = [];\r\n    queue.push([startX, startY]);\r\n    while (!!queue.length) {\r\n        let currentNode = queue.shift();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= cols || currentNode[1] >= rows || visited[currentNode[1]][currentNode[0]] === true) {\r\n            continue;\r\n        }\r\n\r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n\r\n        // return the path if the end node was found\r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        queue.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// Depth first search\r\nexport function dfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let stack = [];\r\n    stack.push([startX, startY]);\r\n    while (!!stack.length) {\r\n        let currentNode = stack.pop();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= cols || currentNode[1] >= rows || visited[currentNode[1]][currentNode[0]]) {\r\n            continue;\r\n        }\r\n        \r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n        \r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        stack.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// returns the path the algorithm took to reach the end node\r\nexport function unweightedShortestPath(startX, startY, endX, endY, path) {\r\n    // do not do anything if the end node was not found in the search\r\n    if (!visited[endY][endX]) {\r\n        return [];\r\n    }\r\n    let currX = path[path.length - 1][0], currY = path[path.length - 1][1];\r\n    let shortestPath = [];\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        let temp = [currX, currY];\r\n        currX = previousNode[temp[1]][temp[0]][0];\r\n        currY = previousNode[temp[1]][temp[0]][1];\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction resetVisited(grid) {\r\n    // function to allow algorithms to have a visited array\r\n    visited = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            if (grid[i][j].isWall) {\r\n                visited[i].push(true);\r\n            } else {\r\n                visited[i].push(false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction resetPreviousNode() {\r\n    previousNode = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport home from \"./HomeScreen.module.css\";\r\n\r\nexport default class HomeScreen extends React.Component {\r\n  componentDidMount() {\r\n    let parent = document.querySelector(`.${home.splitscreen}`);\r\n    let leftPanel = parent.querySelector(`.${home.left}`),\r\n      botPanel = parent\r\n        .querySelector(`.${home.right}`)\r\n        .querySelector(`.${home.content}`);\r\n\r\n    leftPanel.addEventListener(\"mouseover\", function () {\r\n      leftPanel.style.width = `calc(50vw + 1000px + ${window.innerWidth * 0.05}px)`;\r\n    });\r\n\r\n    leftPanel.addEventListener(\"click\", function () {\r\n      window.location.href = \"/DS-and-Algorithm-Visualizer/#/data-structure-visualizer\";\r\n    });\r\n\r\n    botPanel.addEventListener(\"mouseover\", function () {\r\n      leftPanel.style.width = `calc(50vw + 1000px - ${window.innerWidth * 0.05}px)`;\r\n    });\r\n\r\n    botPanel.addEventListener(\"click\", function () {\r\n      window.location.href = \"/DS-and-Algorithm-Visualizer/#/algorithm-visualizer\";\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className={home.pageHeader}>\r\n          <h1 className={home.headerText}>What Do You Want to See Visualized?</h1>\r\n        </div>\r\n        <div className={home.splitscreen}>\r\n          <div className={`${home.panel} ${home.right}`}>\r\n            <div className={home.content}>\r\n              <div className={home.title}>\r\n                <h2>Algorithms</h2>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`${home.panel} ${home.left}`}>\r\n            <div className={home.content}>\r\n              <div className={home.title}>\r\n                <h2>Data Structures</h2>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/arrow_right.91c92c08.jpg\";","export default __webpack_public_path__ + \"static/media/circle.abb2dcd5.png\";","import React from \"react\";\r\nimport right_arrow from \"../Images/arrow_right.jpg\";\r\nimport circle from \"../Images/circle.png\";\r\n\r\nimport algo from \"../AlgoVisualizer.module.css\";\r\n\r\nexport default class Square extends React.Component {\r\n  render() {\r\n    const {\r\n      x,\r\n      y,\r\n      id,\r\n      handleClick,\r\n      className,\r\n      drag,\r\n      drop,\r\n      isStart,\r\n      isEnd,\r\n      weight,\r\n      dragAndDropUpdate,\r\n    } = this.props;\r\n\r\n    if (isStart) {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          weight={weight}\r\n        >\r\n          <img\r\n            src={right_arrow}\r\n            draggable={true}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id={algo.start}\r\n            alt=\"start\"\r\n            title=\"Start\"\r\n          />\r\n        </div>\r\n      );\r\n    } else if (isEnd) {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          weight={weight}\r\n        >\r\n          <img\r\n            src={circle}\r\n            draggable={true}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id={algo.end}\r\n            alt=\"end\"\r\n            title=\"End\"\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          onDrop={(event) => {\r\n            let promise = new Promise(function (resolve) {\r\n              dragAndDropUpdate(id, event);\r\n              resolve(event);\r\n            });\r\n\r\n            promise.then(\r\n              function (value) {\r\n                drop(value);\r\n              },\r\n              function (error) {\r\n                console.log(error);\r\n              }\r\n            );\r\n          }}\r\n          onDragOver={(event) => event.preventDefault()}\r\n          weight={weight}\r\n        >\r\n          {weight === null || weight === 0 ? \"\" : weight}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gear.8ecc30fe.png\";","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport gear from \"../Images/gear.png\";\r\n\r\nimport algo from \"../AlgoVisualizer.module.css\";\r\n\r\nexport default class NavigationBar extends React.Component {\r\n  componentDidMount() {\r\n    document\r\n      .querySelector(\".nav-link\")\r\n      .addEventListener(\"hover\", () => console.log(\"h\"));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      changeAlgorithm,\r\n      changeGrid,\r\n      onClick,\r\n      generateNewGrid,\r\n      clearWeightsAndWalls,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Nav\r\n        justify\r\n        id=\"nav\"\r\n        fill=\"true\"\r\n        variant=\"pills\"\r\n        onSelect={(eventKey) => {\r\n          changeAlgorithm(eventKey);\r\n        }}\r\n      >\r\n        <Nav.Item className=\"nav_title\">\r\n          <Nav.Link>Algorithm Visualizer</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <NavDropdown title=\"Unweighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"BFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Breadth First Search\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"DFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Depth First Search\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <button className={algo.navbar_btn} onClick={onClick}>\r\n          Visualize\r\n          {this.props.algorithm == null ? \"\" : \" \" + this.props.algorithm}!\r\n        </button>\r\n\r\n        <NavDropdown title=\"Weighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"Dijkstra's\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            Dijkstra's\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"A*\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            A*\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <Nav.Item\r\n          onClick={() => {\r\n            generateNewGrid();\r\n          }}\r\n        >\r\n          <Nav.Link>Generate random grid</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item\r\n          onClick={() => {\r\n            clearWeightsAndWalls();\r\n          }}\r\n        >\r\n          <Nav.Link>Clear walls/weights</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          {/* Blank space to seperate settings from algorithms */}\r\n        </Nav.Item>\r\n\r\n        <button\r\n          id={algo.settings_btn}\r\n          onClick={() => {\r\n            $(`#${algo.settings_bg}`).fadeIn(150);\r\n          }}\r\n        >\r\n          <img src={gear} alt=\"settings\" id={algo.gear} />\r\n        </button>\r\n      </Nav>\r\n    );\r\n  }\r\n}\r\n","const rows = 25;\r\nconst cols = 72;\r\n\r\nvar visited;\r\nvar previousNode;\r\n\r\nexport function dijkstra(grid, startX, startY, endX, endY) {\r\n    // reset visited grid and previousNode grid\r\n    resetVisited();\r\n    resetPreviousNode();\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null, null, 0]);\r\n    while (!!q.length) {\r\n        let node = q.shift();\r\n        if (visited[node[1]][[node[0]]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[node[1]][node[0]] = true;\r\n        path.push([node[0], node[1], node[2], node[3]]);\r\n\r\n        if (node[2] != null && previousNode[node[1]][node[0]] === null) {\r\n            previousNode[node[1]][node[0]] = [node[2], node[3]];\r\n        }\r\n\r\n        if (node[0] === endX && node[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        // pushing second and third element to allow backtracking to highlight the shortest path\r\n        if (node[0] + 1 < cols) {\r\n            q.push([node[0] + 1, node[1], node[0], node[1]]);\r\n        }\r\n\r\n        if (node[0] - 1 >= 0) {\r\n            q.push([node[0] - 1, node[1], node[0], node[1]]);\r\n        }\r\n\r\n        if (node[1] + 1 < rows) {\r\n            q.push([node[0], node[1] + 1, node[0], node[1]]);\r\n        }\r\n\r\n        if (node[1] - 1 >= 0) {\r\n            q.push([node[0], node[1] - 1, node[0], node[1]]);\r\n        }\r\n\r\n        // sort queue to get the next neighbor with the least weight\r\n        q.sort((a, b) => {\r\n            return grid[a[1]][a[0]].weight - grid[b[1]][b[0]].weight;\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function astar (grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited();\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null, null, 0]);\r\n\r\n    while (!!q.length) {\r\n        let node = q.shift();\r\n        if (visited[node[1]][node[0]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[node[1]][node[0]] = true;\r\n        path.push([node[0], node[1], node[2], node[3]]);\r\n        if (node[2] != null && previousNode[node[1]][node[0]] === null) {\r\n            previousNode[node[1]][node[0]] = [node[2], node[3]];\r\n        }\r\n        \r\n        if (node[0] === endX && node[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n\r\n        if (node[0] + 1 < cols) {\r\n            q.push([node[0] + 1, node[1], node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[0] - 1 >= 0) {\r\n            q.push([node[0] - 1, node[1], node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[1] + 1 < rows) {\r\n            q.push([node[0], node[1] + 1, node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[1] - 1 >= 0) {\r\n            q.push([node[0], node[1] - 1, node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        // sort by path weight and manhatten distance\r\n        q.sort((a, b) => {\r\n            return (a[4] + (Math.abs(a[1] - endY) + Math.abs(a[0] - endX))) - (b[4] + (Math.abs(b[1] - endY) + Math.abs(b[0] - endX)));\r\n        });\r\n    }\r\n}\r\n\r\n// function that will return the shortest path\r\nexport function weightedShortestPath(startX, startY, path) {\r\n    let currX = path[path.length - 1][2], currY = path[path.length - 1][3];\r\n    let shortestPath = [];\r\n\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        if (previousNode[currY][currX] === null) {\r\n            break;\r\n        }\r\n\r\n        let currNode = [currX, currY];\r\n        currX = previousNode[currNode[1]][currNode[0]][0];\r\n        currY = previousNode[currNode[1]][currNode[0]][1];\r\n\r\n    }\r\n    return shortestPath;\r\n}\r\n\r\n// method that re initializes the visited \r\nfunction resetVisited() {\r\n    visited = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            visited[i].push(false);\r\n        }\r\n    }\r\n}\r\n\r\n// function to reset grid that helps with finding the shortest path\r\nfunction resetPreviousNode() {\r\n    previousNode = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nimport algo from \"../AlgoVisualizer.module.css\";\r\n\r\nvar active = 1;\r\n\r\nexport default class Settings extends React.Component {\r\n  changeSpeed(speed, button) {\r\n    if (button === active) {\r\n      return;\r\n    }\r\n    document\r\n      .getElementsByClassName(`${algo.settings_btn}`)\r\n      [button].classList.replace(`${algo.inactive}`, `${algo.active}`);\r\n    document\r\n      .getElementsByClassName(`${algo.settings_btn}`)\r\n      [active].classList.replace(`${algo.active}`, `${algo.inactive}`);\r\n\r\n    this.props.changeSpeed(speed);\r\n\r\n    // swap the active button\r\n    let temp = active;\r\n    active = button;\r\n    button = temp;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id={algo.settings_bg}\r\n        onClick={(event) => {\r\n          if (event.target.id === `${algo.settings_bg}`) {\r\n            $(`#${algo.settings_bg}`).fadeOut(150);\r\n          }\r\n        }}\r\n      >\r\n        <div id={algo.settings}>\r\n          <span\r\n            id={algo.settings_close}\r\n            onClick={() => {\r\n              $(`#${algo.settings_bg}`).fadeOut(150);\r\n            }}\r\n          >\r\n            &times;\r\n          </span>\r\n          <Table borderless responsive=\"lg\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Speed</th>\r\n                <td>\r\n                  <button\r\n                    className={`${algo.settings_btn} ${algo.inactive}`}\r\n                    onClick={() => this.changeSpeed(\"slow\", 0)}\r\n                  >\r\n                    Slow\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className={`${algo.settings_btn} ${algo.active}`}\r\n                    onClick={() => this.changeSpeed(\"med\", 1)}\r\n                  >\r\n                    Medium\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className={`${algo.settings_btn} ${algo.inactive}`}\r\n                    onClick={() => this.changeSpeed(\"fast\", 2)}\r\n                  >\r\n                    Fast\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport $ from \"jquery\";\r\nimport Square from \"./GridSquare\";\r\nimport NavigationBar from \"./NavBar\";\r\n\r\nimport {\r\n  bfs,\r\n  dfs,\r\n  unweightedShortestPath,\r\n} from \"../Algorithms/UnweightedSearchAlgorithms\";\r\nimport {\r\n  dijkstra,\r\n  astar,\r\n  weightedShortestPath,\r\n} from \"../Algorithms/WeightedSearchAlgorithms\";\r\nimport Settings from \"./Settings\";\r\n\r\nimport algo from \"../AlgoVisualizer.module.css\";\r\n\r\nconst gridRows = 25;\r\nconst gridCols = 72;\r\n\r\nvar unweightedStartNodeX = 5;\r\nvar unweightedStartNodeY = 12;\r\nvar unweightedEndNodeX = 66;\r\nvar unweightedEndNodeY = 12;\r\n\r\nvar weightedStartNodeX = 5;\r\nvar weightedStartNodeY = 12;\r\nvar weightedEndNodeX = 66;\r\nvar weightedEndNodeY = 12;\r\n\r\nexport default class Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mainGrid: [],\r\n      unweightedGrid: [],\r\n      weightedGrid: [],\r\n      currGrid: \"unweighted\",\r\n      algorithm: null,\r\n      speed: 20,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // initialize grid\r\n    let grid = [];\r\n    for (let i = 0; i < gridRows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < gridCols; j++) {\r\n        if (i === weightedStartNodeY && j === weightedStartNodeX) {\r\n          grid[i].push({\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isStart: true,\r\n            isEnd: false,\r\n            className: `${algo.grid_square} ${algo.start}`,\r\n            weight: 0,\r\n          });\r\n        } else if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n          grid[i].push({\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isStart: false,\r\n            isEnd: true,\r\n            className: `${algo.grid_square} ${algo.end}`,\r\n            weight: 0,\r\n          });\r\n        } else {\r\n          grid[i].push({\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isStart: false,\r\n            isEnd: false,\r\n            className: `${algo.grid_square} ${algo.unselected}`,\r\n            weight: 0,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    this.setState({ unweightedGrid: grid });\r\n    // set main grid to unweighted grid\r\n    this.setState({ mainGrid: grid });\r\n\r\n    // initialize weighted grid\r\n    grid = [];\r\n    for (let i = 0; i < gridRows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < gridCols; j++) {\r\n        if (i === weightedStartNodeY && j === weightedStartNodeX) {\r\n          grid[i].push({\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isStart: true,\r\n            isEnd: false,\r\n            className: `${algo.grid_square} ${algo.start}`,\r\n            weight: 0,\r\n          });\r\n        } else if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n          grid[i].push({\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isStart: false,\r\n            isEnd: true,\r\n            className: `${algo.grid_square} ${algo.end}`,\r\n            weight: 0,\r\n          });\r\n        } else {\r\n          grid[i].push({\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isStart: false,\r\n            isEnd: false,\r\n            className: `${algo.grid_square} ${algo.unselected}`,\r\n            weight: 0,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    this.setState({ weightedGrid: grid });\r\n  }\r\n\r\n  handleClick(x, y) {\r\n    console.log(this.state.mainGrid[y][x].isEnd)\r\n    if ($(\"#\" + y + \"-\" + x).has(\"img\").length === 1) {\r\n      return;\r\n    }\r\n\r\n    let newGrid = this.state.mainGrid.slice();\r\n\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      newGrid[y][x] = {\r\n        ...newGrid[y][x],\r\n        isWall: !newGrid[y][x].isWall,\r\n        className: newGrid[y][x].isWall\r\n          ? `${algo.grid_square} ${algo.unselected}`\r\n          : `${algo.grid_square} ${algo.selected}`,\r\n      };\r\n    } else {\r\n      newGrid[y][x] = {\r\n        ...newGrid[y][x],\r\n        weight: newGrid[y][x].weight + 1 === 5 ? 0 : newGrid[y][x].weight + 1,\r\n      };\r\n    }\r\n    this.setState({ mainGrid: newGrid });\r\n  }\r\n\r\n  ///////////////////////////// algorithm animations /////////////////////////////\r\n\r\n  /********************* Unweighted algorithms *********************/\r\n  animateBFS(grid) {\r\n    $(`.${algo.grid}`).css(\"pointer-events\", \"none\");\r\n    const path = bfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n    let stateGrid = this.state.mainGrid;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        $(\"#\" + id).addClass(`${algo.visited}`);\r\n        stateGrid[path[i][1]][path[i][0]].className = `${algo.grid_square} ${\r\n          algo.visited\r\n        }`;\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      $(`.${algo.grid}`).css(\"pointer-events\", \"auto\");\r\n      this.drawUnweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n      this.setState({ mainGrid: stateGrid });\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateDFS(grid) {\r\n    $(`.${algo.grid}`).css(\"pointer-events\", \"none\");\r\n    const path = dfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n    let stateGrid = this.state.mainGrid;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        $(\"#\" + id).addClass(`${algo.visited}`);\r\n        stateGrid[path[i][1]][path[i][0]].className = `${algo.grid_square} ${\r\n          algo.visited\r\n        }`;\r\n      }, speed * i);\r\n    }\r\n    setTimeout(() => {\r\n      $(`.${algo.grid}`).css(\"pointer-events\", \"auto\");\r\n      this.drawUnweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n      this.setState({ mainGrid: stateGrid });\r\n    }, path.length * speed);\r\n  }\r\n\r\n  /********************* Weighted algorithms *********************/\r\n\r\n  animateDijkstra(grid) {\r\n    $(`.${algo.grid}`).css(\"pointer-events\", \"none\");\r\n    const path = dijkstra(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n    let stateGrid = this.state.mainGrid;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        $(\"#\" + id).addClass(`${algo.visited}`);\r\n        stateGrid[path[i][1]][path[i][0]].className = `${algo.grid_square} ${\r\n          algo.visited\r\n        }`;\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      $(`.${algo.grid}`).css(\"pointer-events\", \"auto\");\r\n      this.drawWeightedShortestPath(\r\n        weightedEndNodeX,\r\n        weightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n      this.setState({ mainGrid: stateGrid });\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateAstar(grid) {\r\n    $(`.${algo.grid}`).css(\"pointer-events\", \"none\");\r\n    const path = astar(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n\r\n    let speed = this.state.speed;\r\n    let stateGrid = this.state.mainGrid;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        $(\"#\" + id).addClass(`${algo.visited}`);\r\n        stateGrid[path[i][1]][path[i][0]].className = `${algo.grid_square} ${\r\n          algo.visited\r\n        }`;\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      $(`${algo.grid}`).css(\"pointer-events\", \"auto\");\r\n      this.drawWeightedShortestPath(\r\n        weightedEndNodeX,\r\n        weightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n      this.setState({ mainGrid: stateGrid });\r\n    }, speed * path.length);\r\n  }\r\n\r\n  /////////////////// draw paths //////////////////////////\r\n\r\n  drawUnweightedShortestPath(\r\n    unweightedStartNodeX,\r\n    unweightedStartNodeY,\r\n    unweightedEndNodeX,\r\n    unweightedEndNodeY,\r\n    speed,\r\n    path\r\n  ) {\r\n    let grid = this.state.mainGrid;\r\n    const shortestPath = unweightedShortestPath(\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY,\r\n      path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n        $(\"#\" + id).attr(\"class\", `${algo.grid_square} ${algo.shortestpath}`);\r\n        grid[shortestPath[i][1]][shortestPath[i][0]].className = `${\r\n          algo.grid_square\r\n        } ${algo.shortestpath}`;\r\n      }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      $(`.${algo.grid}`).css(\"pointer-events\", \"auto\");\r\n      this.setState({ mainGrid: grid });\r\n    }, speed * shortestPath.length * 2);\r\n  }\r\n\r\n  drawWeightedShortestPath(\r\n    weightedStartNodeX,\r\n    weightedStartNodeY,\r\n    speed,\r\n    path\r\n  ) {\r\n    let grid = this.state.mainGrid;\r\n    const shortestPath = weightedShortestPath(\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n        $(\"#\" + id).attr(\"class\", `${algo.grid_square} ${algo.shortestpath}`);\r\n        grid[shortestPath[i][1]][shortestPath[i][0]].className = `${\r\n          algo.grid_square\r\n        } ${algo.shortestpath}`;\r\n      }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      $(`.${algo.grid}`).css(\"pointer-events\", \"auto\");\r\n      this.setState({ mainGrid: grid });\r\n    }, shortestPath.length * speed * 2);\r\n  }\r\n\r\n  /////////////////// visualize button function //////////////////////////\r\n  visualizeAlgorithm() {\r\n    this.resetGrid();\r\n    const { algorithm, mainGrid } = this.state;\r\n    switch (algorithm) {\r\n      case \"BFS\":\r\n        this.animateBFS(mainGrid);\r\n        break;\r\n      case \"DFS\":\r\n        this.animateDFS(mainGrid);\r\n        break;\r\n      case \"Dijkstra's\":\r\n        this.animateDijkstra(mainGrid);\r\n        break;\r\n      case \"A*\":\r\n        this.animateAstar(mainGrid);\r\n        break;\r\n      default:\r\n        $(\"#popup\").fadeIn(150);\r\n        break;\r\n    }\r\n  }\r\n\r\n  changeAlgorithm(key) {\r\n    this.setState({ algorithm: key });\r\n  }\r\n\r\n  changeSpeed(speed) {\r\n    if (speed === \"slow\") {\r\n      this.setState({ speed: 30 });\r\n    } else if (speed === \"med\") {\r\n      this.setState({ speed: 20 });\r\n    } else {\r\n      this.setState({ speed: 10 });\r\n    }\r\n  }\r\n\r\n  changeGrid(type) {\r\n    this.resetGrid();\r\n    if (type === \"weighted\" && this.state.currGrid === \"unweighted\") {\r\n      this.setState({\r\n        currGrid: \"weighted\",\r\n        unweightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.weightedGrid,\r\n      });\r\n    } else if (type === \"unweighted\" && this.state.currGrid === \"weighted\") {\r\n      this.setState({\r\n        currGrid: \"unweighted\",\r\n        weightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.unweightedGrid,\r\n      });\r\n    }\r\n  }\r\n\r\n  generateRandomGrid() {\r\n    let grid = this.state.mainGrid.slice();\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (\r\n            (i === unweightedStartNodeY && j === unweightedStartNodeX) ||\r\n            (i === unweightedEndNodeY && j === unweightedEndNodeX)\r\n          ) {\r\n            continue;\r\n          }\r\n          grid[i][j].isWall = Math.random() * 5 > 4;\r\n          grid[i][j].className = grid[i][j].isWall\r\n            ? `${algo.grid_square} ${algo.selected}`\r\n            : `${algo.grid_square} ${algo.unselected}`;\r\n        }\r\n      }\r\n      this.setState({ mainGrid: grid });\r\n    } else {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (\r\n            (i === weightedStartNodeY && j === weightedStartNodeX) ||\r\n            (i === weightedEndNodeY && j === weightedEndNodeX)\r\n          ) {\r\n            grid[i][j].weight = 0;\r\n            continue;\r\n          }\r\n          grid[i][j].weight = Math.trunc(Math.random() * 5);\r\n        }\r\n      }\r\n      this.setState({ mainGrid: grid });\r\n    }\r\n  }\r\n\r\n  clearWeightsAndWalls() {\r\n    let grid = [];\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n            grid[i].push({\r\n              y: i,\r\n              x: j,\r\n              id: i + \"-\" + j,\r\n              isStart: true,\r\n              isEnd: false,\r\n              className: `${algo.grid_square} ${algo.start}`,\r\n              weight: 0,\r\n            });\r\n          } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n            grid[i].push({\r\n              y: i,\r\n              x: j,\r\n              id: i + \"-\" + j,\r\n              isStart: false,\r\n              isEnd: true,\r\n              className: `${algo.grid_square} ${algo.end}`,\r\n              weight: 0,\r\n            });\r\n          } else {\r\n            grid[i].push({\r\n              y: i,\r\n              x: j,\r\n              id: i + \"-\" + j,\r\n              isStart: false,\r\n              isEnd: false,\r\n              className: `${algo.grid_square} ${algo.unselected}`,\r\n              weight: 0,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (i === weightedStartNodeY && j === weightedStartNodeX) {\r\n            grid[i].push({\r\n              y: i,\r\n              x: j,\r\n              id: i + \"-\" + j,\r\n              isStart: true,\r\n              isEnd: false,\r\n              className: `${algo.grid_square} ${algo.start}`,\r\n              weight: 0,\r\n            });\r\n          } else if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n            grid[i].push({\r\n              y: i,\r\n              x: j,\r\n              id: i + \"-\" + j,\r\n              isStart: false,\r\n              isEnd: true,\r\n              className: `${algo.grid_square} ${algo.end}`,\r\n              weight: 0,\r\n            });\r\n          } else {\r\n            grid[i].push({\r\n              y: i,\r\n              x: j,\r\n              id: i + \"-\" + j,\r\n              isStart: false,\r\n              isEnd: false,\r\n              className: `${algo.grid_square} ${algo.unselected}`,\r\n              weight: 0,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({ mainGrid: grid });\r\n  }\r\n\r\n  dragAndDropUpdate(id, e) {\r\n    let newGrid = this.state.mainGrid.slice();\r\n    let data = JSON.parse(e.dataTransfer.getData(\"data\"));\r\n    \r\n    // sX = startX, sY = startY\r\n    // eX = endX, eY = endY\r\n\r\n    let sY = data[1].substring(0, data[1].indexOf(\"-\"));\r\n    let sX = data[1].substring(data[1].indexOf(\"-\") + 1, data[1].length);\r\n    let eY = id.substring(0, id.indexOf(\"-\"));\r\n    let eX = id.substring(id.indexOf(\"-\") + 1, id.length);\r\n\r\n    if (data[0] === `${algo.start}`) {\r\n      newGrid[sY][sX].isStart = false;\r\n      newGrid[eY][eX].isStart = true;\r\n\r\n      newGrid[sY][sX].className = `${algo.grid_square} ${algo.unselected}`;\r\n      newGrid[eY][eX].className = `${algo.grid_square} ${algo.start}`;\r\n    } else {\r\n      newGrid[sY][sX].isEnd = false;\r\n      newGrid[eY][eX].isEnd = true;\r\n\r\n      newGrid[sY][sX].className = `${algo.grid_square} ${algo.unselected}`;\r\n      newGrid[eY][eX].className = `${algo.grid_square} ${algo.end}`\r\n    }\r\n\r\n    if (newGrid[eY][eX].isWall) {\r\n      newGrid[eY][eX].isWall = false;\r\n    }\r\n\r\n    if (this.state.currGrid === \"weighted\") {\r\n      newGrid[eY][eX].weight = 0;\r\n    }\r\n\r\n    this.setState({ mainGrid: newGrid });\r\n  }\r\n\r\n  resetGrid() {\r\n    let grid = this.state.mainGrid;\r\n    for (let i = 0; i < gridRows; i++) {\r\n      for (let j = 0; j < gridCols; j++) {\r\n        // set visited nodes to blank nodes\r\n        let nodeClass = String(grid[i][j].className);\r\n        if (\r\n          nodeClass.includes(\"visited\") ||\r\n          nodeClass.includes(\"shortestpath\")\r\n        ) {\r\n          grid[i][j].className = `${algo.grid_square} ${algo.unselected}`;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ mainGrid: grid });\r\n  }\r\n\r\n  /////////////////// Render ///////////////////\r\n  render() {\r\n    const { mainGrid } = this.state;\r\n    return (\r\n      <div className={`${algo.grid}`} align=\"center\">\r\n        <Settings changeSpeed={(speed) => this.changeSpeed(speed)} />\r\n        <NavigationBar\r\n          onClick={() => this.visualizeAlgorithm()}\r\n          changeAlgorithm={(key) => this.changeAlgorithm(key)}\r\n          changeGrid={(type) => this.changeGrid(type)}\r\n          algorithm={this.state.algorithm}\r\n          generateNewGrid={() => this.generateRandomGrid()}\r\n          clearWeightsAndWalls={() => this.clearWeightsAndWalls()}\r\n        />\r\n        {mainGrid.map((row, key) => {\r\n          return (\r\n            <div className={`${algo.grid_row}`} key={key}>\r\n              {row.map((node, key) => {\r\n                return (\r\n                  <Square\r\n                    {...node}\r\n                    handleClick={(j, i) => this.handleClick(j, i)}\r\n                    drag={drag()}\r\n                    drop={drop(node.id, this.state.currGrid)}\r\n                    key={key}\r\n                    dragAndDropUpdate={(e, id) => this.dragAndDropUpdate(e, id)}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// JavaScript functions\r\n\r\n// drag and drop functions\r\nconst drag = () => (e) => {\r\n  let data = [e.target.id, e.target.parentNode.id];\r\n  e.dataTransfer.setData(\"data\", JSON.stringify(data));\r\n};\r\n\r\nconst drop = (id, grid) => (e) => {\r\n  e.preventDefault();\r\n  let data = JSON.parse(e.dataTransfer.getData(\"data\"));\r\n\r\n  // stringEndId represents the node where data is being dropped\r\n\r\n  let stringEndId = String(id);\r\n  let y = parseInt(stringEndId.substring(0, stringEndId.indexOf(\"-\")));\r\n  let x = parseInt(\r\n    stringEndId.substring(stringEndId.indexOf(\"-\") + 1, stringEndId.length)\r\n  );\r\n  e.target.appendChild(document.getElementById(data[0]));\r\n  \r\n  if (grid === \"unweighted\") {\r\n    if (data[0] === `${algo.start}`) {\r\n      unweightedStartNodeX = x;\r\n      unweightedStartNodeY = y;\r\n    } else {\r\n      unweightedEndNodeX = x;\r\n      unweightedEndNodeY = y;\r\n    }\r\n  } else {\r\n    if (data[0] === `${algo.start}`) {\r\n      weightedStartNodeX = x;\r\n      weightedStartNodeY = y;\r\n    } else {\r\n      weightedEndNodeX = x;\r\n      weightedEndNodeY = y;\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport algo from \"../AlgoVisualizer.module.css\";\r\n\r\nexport default class Popup extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id={algo.popup}>\r\n        <div id={algo.popup_text}>\r\n          You have not selected an algorithm\r\n          <span\r\n            id={algo.close}\r\n            onClick={() => {\r\n              $(\"#popup\").fadeOut(150);\r\n            }}\r\n          >\r\n            &times;\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import Grid from './Components/Grid';\nimport Popup from \"./Components/PopupWarning\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Popup />\n      <Grid/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport ds from \"../DataStructures.module.css\";\r\n\r\nexport default class Toolbar extends React.Component {\r\n  componentDidMount() {\r\n    // make list functions visible\r\n    $(\"#add, #text_add, #remove, #text_rem\").css(\"display\", \"block\");\r\n\r\n    $(\"button\").each((index, element) => {\r\n      element.addEventListener(\"click\", () => {\r\n        $(`#${element.id}`).animate({left: '200px'});\r\n        setTimeout(() => {\r\n          $(`#${element.id}`).animate({left: '0px'});\r\n        }, 300);\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    $(\"div > input, button\").each((index, element) => {\r\n      $(element).css(\"display\", \"none\");\r\n    });\r\n\r\n    this.props.functions.forEach((element) => {\r\n      $(`#${element}`).css(\"display\", \"block\");\r\n      if (element === \"add\") {\r\n        $(\"#text_add\").css(\"display\", \"block\");\r\n      } else if (element === \"remove\") {\r\n        $(\"#text_rem\").css(\"display\", \"block\");\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id={ds.toolbar}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Index\"\r\n          maxLength=\"3\"\r\n          id=\"text_add\"\r\n        ></input>\r\n        <button id=\"add\">Add at index</button>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Index\"\r\n          maxLength=\"3\"\r\n          id=\"text_rem\"\r\n        ></input>\r\n        <button id=\"remove\">Remove at index</button>\r\n\r\n        <button id=\"enqueue\">Enqueue</button>\r\n        <button id=\"dequeue\">Dequeue</button>\r\n\r\n        <button id=\"push\">Push</button>\r\n        <button id=\"pop\">Pop</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nexport default class NavBar extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Nav id=\"nav\" justify variant=\"pills\" defaultActiveKey=\"list\" onSelect={(key) => {\r\n        this.props.onchange(key)\r\n      }}>\r\n        <Nav.Item className=\"nav_title\">\r\n          <Nav.Link>Data Structure Visualizer</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"list\">Dynamic Array (List)</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"set\">Set</Nav.Link>\r\n        </Nav.Item>\r\n        \r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"queue\">Queue</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"deque\">Deque</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"stack\">Stack</Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\n\r\nimport Toolbar from \"./Toolbar\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nimport ds from \"../DataStructures.module.css\";\r\n\r\nexport default class DSVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      behavior: \"list\",\r\n      functions: [\"add\", \"remove\"],\r\n      structure: [],\r\n    };\r\n  }\r\n\r\n  handleChange(key) {\r\n    switch (key) {\r\n      case \"set\":\r\n        this.setState({functions: [\"add\", \"remove\"]})\r\n        break;\r\n      case \"queue\":\r\n        this.setState({functions: [\"enqueue\", \"dequeue\"]})\r\n        break;\r\n      case \"deque\":\r\n        this.setState({functions: [\"enqueue\", \"dequeue\"]})\r\n        break;\r\n      case \"stack\":\r\n        this.setState({functions: [\"push\", \"pop\"]})\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({ behavior: key });\r\n  }\r\n\r\n  // behavior functions\r\n\r\n  add(index) {}\r\n\r\n  remove() {}\r\n\r\n  enqueue() {}\r\n\r\n  dequeue() {}\r\n\r\n  push() {}\r\n\r\n  pop() {}\r\n\r\n  render() {\r\n    return (\r\n      <div className={ds.DSVisualizer}>\r\n        <NavBar onchange={(key) => this.handleChange(key)} />\r\n        <Toolbar\r\n          functions={this.state.functions}\r\n          btns={this.state.functions}\r\n          add={this.add}\r\n          remove={this.remove}\r\n          enqueue={this.enqueue}\r\n          dequeue={this.dequeue}\r\n          push={this.push}\r\n          pop={this.pop}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import ds from \"./DataStructures.module.css\";\r\n\r\nimport Visualizer from \"./Components/Visualizer\"\r\n\r\nfunction DataStructures() {\r\n    return (\r\n        <div className={`${ds.DS}`}>\r\n            <Visualizer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataStructures;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter as Router, Route, Switch, BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from './MainPage/HomeScreen';\nimport AlgoVisualizer from './Algo/AlgoVisualizer'\nimport DataStructures from './DS\\'s/DataStructures'\nimport './Nav.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={MainPage} />\n        <Route exact path=\"/algorithm-visualizer\" component={AlgoVisualizer} />\n        <Route exact path=\"/data-structure-visualizer\" component={DataStructures} />\n      </Switch>\n    </Router>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}