{"version":3,"sources":["Algorithms/UnweightedSearchAlgorithms.js","Algorithms/WeightedSearchAlgorithms.js","Images/arrow_right.jpg","Images/circle.png","Components/GridSquare.jsx","Images/gear.png","Components/NavBar.jsx","Components/Settings.jsx","Components/Grid.jsx","Components/PopupWarning.jsx","App.js","reportWebVitals.js","index.js"],"names":["visited","previousNode","Square","this","props","x","y","className","id","handleClick","isStart","isEnd","drag","drop","weight","src","right_arrow","draggable","onDragStart","event","alt","title","circle","onClick","onDrop","onDragOver","preventDefault","React","Component","NavigationBar","changeAlgorithm","changeGrid","resetGrid","Nav","justify","style","width","fill","variant","onSelect","eventKey","NavDropdown","Item","algorithm","displaySettings","gear","document","getElementById","display","resetVisited","grid","i","push","j","isWall","resetPreviousNode","length","dijkstra","startX","startY","endX","endY","initializeVisited","q","path","currentNode","shift","sortQueue","arr","sort","a","b","active","Settings","speed","button","getElementsByClassName","classList","replace","changeSpeed","temp","close","Table","borderless","responsive","unweightedStartNodeX","unweightedStartNodeY","unweightedEndNodeX","unweightedEndNodeY","weightedStartNodeX","weightedStartNodeY","weightedEndNodeX","weightedEndNodeY","Grid","state","mainGrid","unweightedGrid","weightedGrid","currGrid","visualizeAlgorithm","bind","setState","newGrid","slice","node","newSquare","pointerEvents","queue","bfs","setTimeout","drawUnweightedShortestPath","stack","pop","dfs","shortestPath","currX","currY","unweightedShortestPath","drawWeightedShortestPath","currNode","weightedShortestPath","animateBFS","animateDFS","animateDijkstra","key","type","Math","random","trunc","align","generateRandomGrid","map","row","contains","e","data","target","dataTransfer","setData","JSON","stringify","parse","getData","stringStartId","String","stringEndId","appendChild","parseInt","substring","indexOf","Popup","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.91708042.chunk.js","sourcesContent":["var visited;\r\nvar previousNode;\r\n\r\n// Breadth first search\r\nexport function bfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode(grid);\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let queue = [];\r\n    queue.push([startX, startY]);\r\n    while (!!queue.length) {\r\n        let currentNode = queue.shift();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= 72 || currentNode[1] >= 25 || visited[currentNode[1]][currentNode[0]] === true) {\r\n            continue;\r\n        }\r\n\r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n\r\n        // return the path if the end node was found\r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        queue.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// Depth first search\r\nexport function dfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode(grid);\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let stack = [];\r\n    stack.push([startX, startY]);\r\n    while (!!stack.length) {\r\n        let currentNode = stack.pop();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= 72 || currentNode[1] >= 25 || visited[currentNode[1]][currentNode[0]]) {\r\n            continue;\r\n        }\r\n        \r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n        \r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        stack.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// returns the path the algorithm took to reach the end node\r\nexport function unweightedShortestPath(startX, startY, endX, endY, path) {\r\n    // do not do anything if the end node was not found in the search\r\n    if (!visited[endY][endX]) {\r\n        return;\r\n    }\r\n    let currX = path[path.length - 1][0], currY = path[path.length - 1][1];\r\n    let shortestPath = [];\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n\r\n        let temp = [currX, currY];\r\n        currX = previousNode[temp[1]][temp[0]][0];\r\n        currY = previousNode[temp[1]][temp[0]][1];\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction resetVisited(grid) {\r\n    // function to allow algorithms to have a visited array\r\n    visited = [];\r\n    for (let i = 0; i < 25; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < 72; j++) {\r\n            if (grid[i][j].isWall) {\r\n                visited[i].push(true);\r\n            } else {\r\n                visited[i].push(false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction resetPreviousNode(grid) {\r\n    previousNode = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","var visited;\r\nvar previousNode;\r\n\r\nexport function dijkstra(grid, startX, startY, endX, endY) {\r\n    // reset visited grid and previousNode grid\r\n    initializeVisited(grid);\r\n    resetPreviousNode(grid);\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null]);\r\n    while (!!q.length) {\r\n        let currentNode = q.shift();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= 72 || currentNode[1] >= 25 || visited[currentNode[1]][[currentNode[0]]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1], currentNode[2], currentNode[3]]);\r\n\r\n        if (currentNode[2] != null && previousNode[currentNode[1]][currentNode[0]] === null) {\r\n            previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        }\r\n\r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        // pushing second and third element to allow backtracking to highlight the shortest path\r\n        if (currentNode[0] + 1 <= 71) {\r\n            q.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        }\r\n\r\n        if (currentNode[0] - 1 >= 0) {\r\n            q.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        }\r\n\r\n        if (currentNode[1] + 1 <= 24) {\r\n            q.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n        }\r\n\r\n        if (currentNode[1] - 1 >= 0) {\r\n            q.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n        }\r\n\r\n        // sort queue to get the next neighbor with the least weight\r\n        q = sortQueue(q, grid);\r\n    }\r\n    return path;\r\n}\r\n\r\n// function that will return the shortest path\r\nexport function weightedShortestPath(startX, startY, path) {\r\n    let currX = path[path.length - 1][2], currY = path[path.length - 1][3];\r\n    let shortestPath = [];\r\n\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        if (previousNode[currY][currX] === null) {\r\n            break;\r\n        }\r\n\r\n        let currNode = [currX, currY];\r\n        currX = previousNode[currNode[1]][currNode[0]][0];\r\n        currY = previousNode[currNode[1]][currNode[0]][1];\r\n\r\n    }\r\n    return shortestPath;\r\n}\r\n\r\n// sorting the queue such that it behaves like a priority queue\r\nfunction sortQueue(arr, grid) {\r\n    arr.sort((a, b) => {\r\n        return grid[a[1]][a[0]].weight - grid[b[1]][b[0]].weight;\r\n    });\r\n    return arr;\r\n}\r\n\r\n// method that re initializes the visited \r\nfunction initializeVisited(grid) {\r\n    visited = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            visited[i].push(false);\r\n        }\r\n    }\r\n}\r\n\r\n// function to reset grid that helps with finding the shortest path\r\nfunction resetPreviousNode(grid) {\r\n    previousNode = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/arrow_right.91c92c08.jpg\";","export default __webpack_public_path__ + \"static/media/circle.abb2dcd5.png\";","import React from \"react\";\r\nimport right_arrow from \"../Images/arrow_right.jpg\";\r\nimport circle from \"../Images/circle.png\";\r\n\r\nexport default class Square extends React.Component {\r\n  render() {\r\n    const {\r\n      x,\r\n      y,\r\n      className,\r\n      id,\r\n      handleClick,\r\n      isStart,\r\n      isEnd,\r\n      drag,\r\n      drop,\r\n      weight,\r\n    } = this.props;\r\n\r\n    if (isStart) {\r\n      return (\r\n        <div className={className} id={id}>\r\n          <img\r\n            src={right_arrow}\r\n            draggable={false}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id=\"start\"\r\n            alt=\"start\"\r\n            title=\"Start\"\r\n          />\r\n        </div>\r\n      );\r\n    } else if (isEnd) {\r\n      return (\r\n        <div className={className} id={id}>\r\n          <img\r\n            src={circle}\r\n            draggable={false}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id=\"end\"\r\n            alt=\"end\"\r\n            title=\"End\"\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          onDrop={(event) => {\r\n            drop(event);\r\n          }}\r\n          onDragOver={(event) => event.preventDefault()}\r\n          weight={weight}\r\n        >\r\n          {weight === null || weight === 0 ? \"\" : weight}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gear.8ecc30fe.png\";","import React from \"react\";\r\n\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport gear from \"../Images/gear.png\";\r\n\r\nexport default class NavigationBar extends React.Component {\r\n  render() {\r\n    const { changeAlgorithm, changeGrid, onClick, resetGrid } = this.props;\r\n    return (\r\n      <Nav\r\n        justify\r\n        id=\"nav\"\r\n        style={{ width: 100 + \"%\" }}\r\n        fill=\"true\"\r\n        variant=\"pills\"\r\n        onSelect={(eventKey) => {\r\n          changeAlgorithm(eventKey);\r\n        }}\r\n      >\r\n        <NavDropdown title=\"Unweighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"BFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Breadth First Search\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"DFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Depth First Search\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <button id=\"navbar-btn\" onClick={onClick}>\r\n          Visualize\r\n          {this.props.algorithm == null ? \"\" : \" \" + this.props.algorithm}!\r\n        </button>\r\n\r\n        <NavDropdown title=\"Weighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"Dijkstra's\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            Dijkstra's\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"A*\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            A*\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <button id=\"navbar-btn\" onClick={resetGrid}>\r\n          Generate random grid\r\n        </button>\r\n\r\n        <Nav.Item>\r\n          {/* Blank space to seperate settings from algorithms */}\r\n        </Nav.Item>\r\n\r\n        <button id=\"settings-btn\" onClick={displaySettings}>\r\n          <img src={gear} alt=\"settings\" id=\"gear\" />\r\n        </button>\r\n      </Nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst displaySettings = () => {\r\n  document.getElementById(\"settings-bg\").style.display = \"block\";\r\n};\r\n","import React from \"react\";\r\n\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nvar active = 2;\r\n\r\nexport default class Settings extends React.Component {\r\n\r\n\r\n  close() {\r\n    document.getElementById(\"settings-bg\").style.display = \"none\";\r\n  }\r\n\r\n  changeSpeed(speed, button) {\r\n    document\r\n      .getElementsByClassName(\"speed-btn\")\r\n      [button].classList.replace(\"inactive\", \"active\");\r\n    document.getElementsByClassName(\"speed-btn\")[active].classList.replace(\"active\", \"inactive\");\r\n    this.props.changeSpeed(speed);\r\n    \r\n    // swap the active button\r\n    let temp = active;\r\n    active = button;\r\n    button = temp;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"settings-bg\">\r\n        <div id=\"settings\">\r\n          <span id=\"settings-close\" onClick={this.close}>\r\n            &times;\r\n          </span>\r\n          <Table borderless responsive=\"lg\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Speed</th>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn inactive\"\r\n                    onClick={() => this.changeSpeed(\"slow\", 0)}\r\n                  >\r\n                    Slow\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn inactive\"\r\n                    onClick={() => this.changeSpeed(\"med\", 1)}\r\n                  >\r\n                    Medium\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn active\"\r\n                    onClick={() => this.changeSpeed(\"fast\", 2)}\r\n                  >\r\n                    Fast\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./GridSquare\";\r\nimport NavigationBar from \"./NavBar\";\r\n\r\nimport { bfs, dfs, unweightedShortestPath } from \"../Algorithms/UnweightedSearchAlgorithms\";\r\nimport {\r\n  dijkstra,\r\n  weightedShortestPath,\r\n} from \"../Algorithms/WeightedSearchAlgorithms\";\r\nimport Settings from \"./Settings\";\r\n\r\nvar unweightedStartNodeX = 5;\r\nvar unweightedStartNodeY = 12;\r\nvar unweightedEndNodeX = 66;\r\nvar unweightedEndNodeY = 12;\r\n\r\nvar weightedStartNodeX = 5;\r\nvar weightedStartNodeY = 12;\r\nvar weightedEndNodeX = 66;\r\nvar weightedEndNodeY = 12;\r\n\r\nexport default class Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mainGrid: [],\r\n      unweightedGrid: [],\r\n      weightedGrid: [],\r\n      currGrid: \"unweighted\",\r\n      algorithm: null,\r\n      speed: 10,\r\n    };\r\n\r\n    this.visualizeAlgorithm = this.visualizeAlgorithm.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // initialize grid\r\n    let grid = [];\r\n    for (let i = 0; i < 25; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < 72; j++) {\r\n        let isStart = i === unweightedStartNodeY && j === unweightedStartNodeX,\r\n          isEnd = i === unweightedEndNodeY && j === unweightedEndNodeX,\r\n          className;\r\n        if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          isWall: false,\r\n          weight: null,\r\n          className: className,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ unweightedGrid: grid });\r\n    // set main grid to unweighted grid\r\n    this.setState({ mainGrid: grid });\r\n\r\n    // initialize weighted grid\r\n    grid = [];\r\n    for (let i = 0; i < 25; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < 72; j++) {\r\n        let isStart = i === weightedStartNodeY && j === weightedStartNodeX,\r\n          isEnd = i === weightedEndNodeY && j === weightedEndNodeX,\r\n          className;\r\n        if (i === weightedStartNodeY && j === weightedStartNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          className: className,\r\n          weight: 0 /*Math.trunc(Math.random() * 5)*/,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ weightedGrid: grid });\r\n  }\r\n\r\n  handleClick(x, y) {\r\n    if (\r\n      (x === unweightedStartNodeX && y === unweightedStartNodeY) ||\r\n      (x === unweightedEndNodeX && y === unweightedEndNodeY)\r\n    ) {\r\n      return;\r\n    }\r\n    let newGrid = this.state.mainGrid.slice();\r\n    let node = newGrid[y][x];\r\n\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      const newSquare = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n        className: node.isWall\r\n          ? \"grid-square unselected\"\r\n          : \"grid-square selected\",\r\n      };\r\n      newGrid[y][x] = newSquare;\r\n    } else {\r\n      const newSquare = {\r\n        ...node,\r\n        weight: node.weight + 1,\r\n      };\r\n      newGrid[y][x] = newSquare;\r\n    }\r\n    this.setState({ mainGrid: newGrid });\r\n  }\r\n\r\n  ///////////////////////////// algorithm animations //////////////////////////////////////////////\r\n\r\n  /********************* Unweighted algorithms *********************/\r\n  animateBFS(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = bfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      this.drawUnweightedShortestPath(path);\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateDFS(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = dfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      this.drawUnweightedShortestPath(path)\r\n    }, path.length * speed);\r\n  }\r\n\r\n  drawUnweightedShortestPath(path) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const shortestPath = unweightedShortestPath(\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY,\r\n      path\r\n    );\r\n\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n        document.getElementById(id).className = \"grid-square shortestpath\"\r\n      }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n    }, speed * shortestPath.length * 2);\r\n  }\r\n\r\n  /********************* Weighted algorithms *********************/\r\n  animateDijkstra(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = dijkstra(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n    const speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      this.drawWeightedShortestPath(path);\r\n    }, path.length * speed);\r\n  }\r\n\r\n  drawWeightedShortestPath(path) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    let speed = this.state.speed;\r\n    const shortestPath = weightedShortestPath(\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n        document.getElementById(id).className = \"grid-square shortestpath\";\r\n      }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n    }, shortestPath.length * speed * 2);\r\n  }\r\n\r\n  /////////////////// visualize button function //////////////////////////\r\n  visualizeAlgorithm() {\r\n    resetGrid();\r\n    const { algorithm, mainGrid } = this.state;\r\n    switch (algorithm) {\r\n      case \"BFS\":\r\n        this.animateBFS(mainGrid);\r\n        break;\r\n      case \"DFS\":\r\n        this.animateDFS(mainGrid);\r\n        break;\r\n      case \"Dijkstra's\":\r\n        this.animateDijkstra(mainGrid);\r\n        break;\r\n      default:\r\n        document.getElementById(\"popup\").style.display = \"block\";\r\n        break;\r\n    }\r\n  }\r\n\r\n  changeAlgorithm(key) {\r\n    this.setState({ algorithm: key });\r\n  }\r\n\r\n  changeSpeed(speed) {\r\n    if (speed === \"slow\") {\r\n      this.setState({ speed: 30 });\r\n    } else if (speed === \"med\") {\r\n      this.setState({ speed: 20 });\r\n    } else {\r\n      this.setState({ speed: 10 });\r\n    }\r\n  }\r\n\r\n  changeGrid(type) {\r\n    resetGrid();\r\n    if (type === \"weighted\" && this.state.currGrid === \"unweighted\") {\r\n      this.setState({\r\n        unweightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.weightedGrid,\r\n        currGrid: \"weighted\",\r\n      });\r\n    } else if (type === \"unweighted\" && this.state.currGrid === \"weighted\") {\r\n      this.setState({\r\n        weightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.unweightedGrid,\r\n        currGrid: \"unweighted\",\r\n      });\r\n    }\r\n  }\r\n\r\n  generateRandomGrid() {\r\n    let grid = this.state.mainGrid.slice();\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < 25; i++) {\r\n        for (let j = 0; j < 72; j++) {\r\n          if ((i === unweightedStartNodeY && j === unweightedStartNodeX) || (i === unweightedEndNodeY && j === unweightedEndNodeX)) {\r\n            continue;\r\n          }\r\n          grid[i][j].isWall = Math.random() * 5 > 4;\r\n          grid[i][j].className = grid[i][j].isWall\r\n            ? \"grid-square selected\"\r\n            : \"grid-square unselected\";\r\n        }\r\n      }\r\n      if (this.state.currGrid === \"unweighted\") {\r\n        this.setState({ mainGrid: grid });\r\n      } else {\r\n        this.setState({ unweightedGrid: grid });\r\n      }\r\n    } else {\r\n      for (let i = 0; i < 25; i++) {\r\n        for (let j = 0; j < 72; j++) {\r\n          if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n            grid[i][j].weight = 0;\r\n            continue;\r\n          }\r\n          grid[i][j].weight = Math.trunc(Math.random() * 5);\r\n        }\r\n      }\r\n      if (this.state.currGrid === \"weighted\") {\r\n        this.setState({ mainGrid: grid });\r\n      } else {\r\n        this.setState({ weightedGrid: grid });\r\n      }\r\n    }\r\n  }\r\n  // Render ///////////////////////////////////////////////////\r\n  render() {\r\n    const { mainGrid } = this.state;\r\n    return (\r\n      <div className=\"grid\" align=\"center\">\r\n        <Settings changeSpeed={(speed) => this.changeSpeed(speed)} />\r\n        <NavigationBar\r\n          onClick={this.visualizeAlgorithm}\r\n          changeAlgorithm={(key) => this.changeAlgorithm(key)}\r\n          changeGrid={(type) => this.changeGrid(type)}\r\n          algorithm={this.state.algorithm}\r\n          resetGrid={() => this.generateRandomGrid()}\r\n        />\r\n        {mainGrid.map((row, key) => {\r\n          return (\r\n            <div className=\"grid-row\" key={key}>\r\n              {row.map((node, key) => {\r\n                return (\r\n                  <Square\r\n                    {...node}\r\n                    handleClick={(j, i) => this.handleClick(j, i)}\r\n                    drag={drag(node.id)}\r\n                    drop={drop(node.id, this.state.currGrid)}\r\n                    key={key}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// JavaScript functions\r\n\r\nconst resetGrid = () => {\r\n  for (let i = 0; i < 25; i++) {\r\n    for (let j = 0; j < 72; j++) {\r\n      // set visited nodes to blank nodes\r\n      let node = document.getElementById(i + \"-\" + j);\r\n      if (node.classList.contains(\"visited\") || node.classList.contains(\"shortestpath\")) {\r\n        node.className = \"grid-square unselected\";\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// drag and drop functions\r\n\r\n/////////////////////////// currently incative //////////////////////////////\r\nconst drag = (id) => (e) => {\r\n  let data = [e.target.id, id];\r\n  e.dataTransfer.setData(\"data\", JSON.stringify(data));\r\n};\r\n\r\nconst drop = (id, grid) => (e) => {\r\n  e.preventDefault();\r\n  var data = JSON.parse(e.dataTransfer.getData(\"data\"));\r\n  let stringStartId = String(data[1]),\r\n    stringEndId = String(id);\r\n  e.target.appendChild(document.getElementById(data[0]));\r\n  let y = parseInt(stringEndId.substring(0, stringEndId.indexOf(\"-\"))),\r\n    x = parseInt(\r\n      stringEndId.substring(stringEndId.indexOf(\"-\") + 1, stringEndId.length)\r\n    );\r\n\r\n  if (grid === \"unweighted\") {\r\n    if (data === \"start\") {\r\n      unweightedStartNodeX = x;\r\n      unweightedStartNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square start\";\r\n    } else {\r\n      unweightedEndNodeX = x;\r\n      unweightedEndNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square end\";\r\n    }\r\n    document\r\n      .getElementById(stringStartId)\r\n      .classList.replace(\"end\", \"unselected\");\r\n  } else {\r\n    if (data === \"start\") {\r\n      weightedStartNodeX = x;\r\n      weightedStartNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square start\";\r\n    } else {\r\n      weightedEndNodeX = x;\r\n      weightedEndNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square end\";\r\n    }\r\n    document\r\n      .getElementById(stringStartId)\r\n      .classList.replace(\"end\", \"unselected\");\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nexport default class Popup extends React.Component {\r\n\r\n  onClick() {\r\n    document.getElementById(\"popup\").style.display = \"none\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"popup\">\r\n        <div id=\"popup-text\">\r\n          You have not selected an algorithm <span id=\"close\" onClick={this.onClick}>&times;</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import './App.css';\n\nimport Grid from './Components/Grid';\nimport Popup from \"./Components/PopupWarning\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Popup />\n      <Grid/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}