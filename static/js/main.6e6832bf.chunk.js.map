{"version":3,"sources":["Algorithms/UnweightedSearchAlgorithms.js","Images/arrow_right.jpg","Images/circle.png","Components/GridSquare.jsx","Images/gear.png","Components/NavBar.jsx","Algorithms/WeightedSearchAlgorithms.js","Grid-Functions/PathDrawing.js","Components/Settings.jsx","Components/Grid.jsx","Components/PopupWarning.jsx","App.js","reportWebVitals.js","index.js"],"names":["visited","previousNode","Square","this","props","x","y","className","id","handleClick","isStart","isEnd","drag","drop","weight","src","right_arrow","draggable","onDragStart","event","alt","title","circle","onClick","onDrop","onDragOver","preventDefault","React","Component","NavigationBar","changeAlgorithm","changeGrid","generateNewGrid","clearWeightsAndWalls","Nav","responsive","justify","style","width","fill","variant","onSelect","eventKey","Item","Link","NavDropdown","algorithm","displaySettings","gear","document","getElementById","display","resetVisited","grid","i","push","j","isWall","resetPreviousNode","drawWeightedShortestPath","weightedStartNodeX","weightedStartNodeY","speed","path","getElementsByClassName","pointerEvents","shortestPath","startX","startY","currX","length","currY","currNode","weightedShortestPath","setTimeout","drawUnweightedShortestPath","unweightedStartNodeX","unweightedStartNodeY","unweightedEndNodeX","unweightedEndNodeY","endX","endY","temp","unweightedShortestPath","active","Settings","button","classList","replace","changeSpeed","close","Table","borderless","gridRows","gridCols","weightedEndNodeX","weightedEndNodeY","Grid","state","mainGrid","unweightedGrid","weightedGrid","currGrid","visualizeAlgorithm","bind","setState","newGrid","slice","node","newSquare","queue","currentNode","shift","bfs","stack","pop","dfs","q","sort","a","b","dijkstra","Math","abs","astar","resetGrid","animateBFS","animateDFS","animateDijkstra","animateAstar","key","type","appendChild","random","trunc","align","generateRandomGrid","map","row","contains","e","data","target","dataTransfer","setData","JSON","stringify","parse","getData","stringStartId","String","stringEndId","parseInt","substring","indexOf","Popup","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6e6832bf.chunk.js","sourcesContent":["var visited;\r\nvar previousNode;\r\n\r\nconst rows = 25;\r\nconst cols = 72;\r\n\r\n// Breadth first search\r\nexport function bfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let queue = [];\r\n    queue.push([startX, startY]);\r\n    while (!!queue.length) {\r\n        let currentNode = queue.shift();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= cols || currentNode[1] >= rows || visited[currentNode[1]][currentNode[0]] === true) {\r\n            continue;\r\n        }\r\n\r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n\r\n        // return the path if the end node was found\r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        queue.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n        queue.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// Depth first search\r\nexport function dfs(grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited(grid);\r\n    let path = [];\r\n    let stack = [];\r\n    stack.push([startX, startY]);\r\n    while (!!stack.length) {\r\n        let currentNode = stack.pop();\r\n        if (currentNode[0] < 0 || currentNode[1] < 0 || currentNode[0] >= cols || currentNode[1] >= rows || visited[currentNode[1]][currentNode[0]]) {\r\n            continue;\r\n        }\r\n        \r\n        previousNode[currentNode[1]][currentNode[0]] = [currentNode[2], currentNode[3]];\r\n        visited[currentNode[1]][currentNode[0]] = true;\r\n        path.push([currentNode[0], currentNode[1]]);\r\n        \r\n        if (currentNode[0] === endX && currentNode[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        stack.push([currentNode[0] - 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0] + 1, currentNode[1], currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] - 1, currentNode[0], currentNode[1]]);\r\n        stack.push([currentNode[0], currentNode[1] + 1, currentNode[0], currentNode[1]]);\r\n    }\r\n\r\n    // returns the path if the end node was unreachable\r\n    return path;\r\n}\r\n\r\n// returns the path the algorithm took to reach the end node\r\nexport function unweightedShortestPath(startX, startY, endX, endY, path) {\r\n    // do not do anything if the end node was not found in the search\r\n    if (!visited[endY][endX]) {\r\n        return [];\r\n    }\r\n    let currX = path[path.length - 1][0], currY = path[path.length - 1][1];\r\n    let shortestPath = [];\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        let temp = [currX, currY];\r\n        currX = previousNode[temp[1]][temp[0]][0];\r\n        currY = previousNode[temp[1]][temp[0]][1];\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction resetVisited(grid) {\r\n    // function to allow algorithms to have a visited array\r\n    visited = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            if (grid[i][j].isWall) {\r\n                visited[i].push(true);\r\n            } else {\r\n                visited[i].push(false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction resetPreviousNode() {\r\n    previousNode = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/arrow_right.91c92c08.jpg\";","export default __webpack_public_path__ + \"static/media/circle.abb2dcd5.png\";","import React from \"react\";\r\nimport right_arrow from \"../Images/arrow_right.jpg\";\r\nimport circle from \"../Images/circle.png\";\r\n\r\nexport default class Square extends React.Component {\r\n  render() {\r\n    const {\r\n      x,\r\n      y,\r\n      className,\r\n      id,\r\n      handleClick,\r\n      isStart,\r\n      isEnd,\r\n      drag,\r\n      drop,\r\n      weight,\r\n    } = this.props;\r\n\r\n    if (isStart) {\r\n      return (\r\n        <div className={className} id={id}>\r\n          <img\r\n            src={right_arrow}\r\n            draggable={true}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id=\"start\"\r\n            alt=\"start\"\r\n            title=\"Start\"\r\n          />\r\n        </div>\r\n      );\r\n    } else if (isEnd) {\r\n      return (\r\n        <div className={className} id={id}>\r\n          <img\r\n            src={circle}\r\n            draggable={true}\r\n            onDragStart={(event) => {\r\n              drag(event);\r\n            }}\r\n            id=\"end\"\r\n            alt=\"end\"\r\n            title=\"End\"\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className={className}\r\n          onClick={() => handleClick(x, y)}\r\n          id={id}\r\n          onDrop={(event) => {\r\n            drop(event);\r\n          }}\r\n          onDragOver={(event) => event.preventDefault()}\r\n          weight={weight}\r\n        >\r\n          {weight === null || weight === 0 ? \"\" : weight}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gear.8ecc30fe.png\";","import React from \"react\";\r\n\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport gear from \"../Images/gear.png\";\r\n\r\nexport default class NavigationBar extends React.Component {\r\n  render() {\r\n    const {\r\n      changeAlgorithm,\r\n      changeGrid,\r\n      onClick,\r\n      generateNewGrid,\r\n      clearWeightsAndWalls,\r\n    } = this.props;\r\n    return (\r\n      <Nav\r\n        responsive\r\n        justify\r\n        id=\"nav\"\r\n        style={{ width: 100 + \"%\" }}\r\n        fill=\"true\"\r\n        variant=\"pills\"\r\n        onSelect={(eventKey) => {\r\n          changeAlgorithm(eventKey);\r\n        }}\r\n      >\r\n        <Nav.Item>\r\n          <Nav.Link className=\"nav-title\">Algorithm Visualizer</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <NavDropdown title=\"Unweighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"BFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Breadth First Search\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"DFS\"\r\n            onClick={() => {\r\n              changeGrid(\"unweighted\");\r\n            }}\r\n          >\r\n            Depth First Search\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <button className=\"navbar-btn\" onClick={onClick}>\r\n          Visualize\r\n          {this.props.algorithm == null ? \"\" : \" \" + this.props.algorithm}!\r\n        </button>\r\n\r\n        <NavDropdown title=\"Weighted algorithms\">\r\n          <NavDropdown.Item\r\n            eventKey=\"Dijkstra's\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            Dijkstra's\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            eventKey=\"A*\"\r\n            onClick={() => {\r\n              changeGrid(\"weighted\");\r\n            }}\r\n          >\r\n            A*\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n\r\n        <Nav.Item\r\n          onClick={() => {\r\n            generateNewGrid();\r\n          }}\r\n        >\r\n          <Nav.Link>Generate random grid</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item\r\n          onClick={() => {\r\n            clearWeightsAndWalls();\r\n          }}\r\n        >\r\n          <Nav.Link>Clear walls/weights</Nav.Link>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          {/* Blank space to seperate settings from algorithms */}\r\n        </Nav.Item>\r\n\r\n        <button id=\"settings-btn\" onClick={displaySettings}>\r\n          <img src={gear} alt=\"settings\" id=\"gear\" />\r\n        </button>\r\n      </Nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst displaySettings = () => {\r\n  document.getElementById(\"settings-bg\").style.display = \"block\";\r\n};\r\n","const rows = 25;\r\nconst cols = 72;\r\n\r\nvar visited;\r\nvar previousNode;\r\n\r\nexport function dijkstra(grid, startX, startY, endX, endY) {\r\n    // reset visited grid and previousNode grid\r\n    resetVisited();\r\n    resetPreviousNode();\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null, null, 0]);\r\n    while (!!q.length) {\r\n        let node = q.shift();\r\n        if (visited[node[1]][[node[0]]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[node[1]][node[0]] = true;\r\n        path.push([node[0], node[1], node[2], node[3]]);\r\n\r\n        if (node[2] != null && previousNode[node[1]][node[0]] === null) {\r\n            previousNode[node[1]][node[0]] = [node[2], node[3]];\r\n        }\r\n\r\n        if (node[0] === endX && node[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n        // pushing second and third element to allow backtracking to highlight the shortest path\r\n        if (node[0] + 1 < cols) {\r\n            q.push([node[0] + 1, node[1], node[0], node[1]]);\r\n        }\r\n\r\n        if (node[0] - 1 >= 0) {\r\n            q.push([node[0] - 1, node[1], node[0], node[1]]);\r\n        }\r\n\r\n        if (node[1] + 1 < rows) {\r\n            q.push([node[0], node[1] + 1, node[0], node[1]]);\r\n        }\r\n\r\n        if (node[1] - 1 >= 0) {\r\n            q.push([node[0], node[1] - 1, node[0], node[1]]);\r\n        }\r\n\r\n        // sort queue to get the next neighbor with the least weight\r\n        q.sort((a, b) => {\r\n            return grid[a[1]][a[0]].weight - grid[b[1]][b[0]].weight;\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function astar (grid, startX, startY, endX, endY) {\r\n    resetPreviousNode();\r\n    resetVisited();\r\n    let q = [], path = [];\r\n    q.push([startX, startY, null, null, 0]);\r\n\r\n    while (!!q.length) {\r\n        let node = q.shift();\r\n        if (visited[node[1]][node[0]]) {\r\n            continue;\r\n        }\r\n\r\n        visited[node[1]][node[0]] = true;\r\n        path.push([node[0], node[1], node[2], node[3]]);\r\n        if (node[2] != null && previousNode[node[1]][node[0]] === null) {\r\n            previousNode[node[1]][node[0]] = [node[2], node[3]];\r\n        }\r\n        \r\n        if (node[0] === endX && node[1] === endY) {\r\n            return path;\r\n        }\r\n\r\n\r\n        if (node[0] + 1 < cols) {\r\n            q.push([node[0] + 1, node[1], node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[0] - 1 >= 0) {\r\n            q.push([node[0] - 1, node[1], node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[1] + 1 < rows) {\r\n            q.push([node[0], node[1] + 1, node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        if (node[1] - 1 >= 0) {\r\n            q.push([node[0], node[1] - 1, node[0], node[1], node[4] + grid[node[1]][node[0]].weight]);\r\n        }\r\n\r\n        // sort by path weight and manhatten distance\r\n        q.sort((a, b) => {\r\n            return (a[4] + (Math.abs(a[1] - endY) + Math.abs(a[0] - endX))) - (b[4] + (Math.abs(b[1] - endY) + Math.abs(b[0] - endX)));\r\n        });\r\n    }\r\n}\r\n\r\n// function that will return the shortest path\r\nexport function weightedShortestPath(startX, startY, path) {\r\n    let currX = path[path.length - 1][2], currY = path[path.length - 1][3];\r\n    let shortestPath = [];\r\n\r\n    while (currX !== startX || currY !== startY) {\r\n        shortestPath.push([currX, currY]);\r\n        if (previousNode[currY][currX] === null) {\r\n            break;\r\n        }\r\n\r\n        let currNode = [currX, currY];\r\n        currX = previousNode[currNode[1]][currNode[0]][0];\r\n        currY = previousNode[currNode[1]][currNode[0]][1];\r\n\r\n    }\r\n    return shortestPath;\r\n}\r\n\r\n// method that re initializes the visited \r\nfunction resetVisited() {\r\n    visited = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        visited.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            visited[i].push(false);\r\n        }\r\n    }\r\n}\r\n\r\n// function to reset grid that helps with finding the shortest path\r\nfunction resetPreviousNode() {\r\n    previousNode = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        previousNode.push([]);\r\n        for (let j = 0; j < cols; j++) {\r\n            previousNode[i].push(null);\r\n        }\r\n    }\r\n}","import { unweightedShortestPath } from \"../Algorithms/UnweightedSearchAlgorithms\"\r\nimport { weightedShortestPath } from \"../Algorithms/WeightedSearchAlgorithms\"\r\n\r\nexport function drawWeightedShortestPath(weightedStartNodeX, weightedStartNodeY, speed, path) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const shortestPath = weightedShortestPath(\r\n        weightedStartNodeX,\r\n        weightedStartNodeY,\r\n        path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n        setTimeout(() => {\r\n            let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n            document.getElementById(id).className = \"grid-square shortestpath\";\r\n        }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n        document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n    }, shortestPath.length * speed * 2);\r\n}\r\n\r\nexport function drawUnweightedShortestPath(unweightedStartNodeX, unweightedStartNodeY, unweightedEndNodeX, unweightedEndNodeY, speed, path) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const shortestPath = unweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        path\r\n    );\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n        setTimeout(() => {\r\n            let id = shortestPath[i][1] + \"-\" + shortestPath[i][0];\r\n            document.getElementById(id).className = \"grid-square shortestpath\";\r\n        }, speed * i * 2);\r\n    }\r\n\r\n    setTimeout(() => {\r\n        document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n    }, speed * shortestPath.length * 2);\r\n}","import React from \"react\";\r\n\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nvar active = 2;\r\n\r\nexport default class Settings extends React.Component {\r\n\r\n\r\n  close() {\r\n    document.getElementById(\"settings-bg\").style.display = \"none\";\r\n  }\r\n\r\n  changeSpeed(speed, button) {\r\n    document\r\n      .getElementsByClassName(\"speed-btn\")\r\n      [button].classList.replace(\"inactive\", \"active\");\r\n    document.getElementsByClassName(\"speed-btn\")[active].classList.replace(\"active\", \"inactive\");\r\n    this.props.changeSpeed(speed);\r\n    \r\n    // swap the active button\r\n    let temp = active;\r\n    active = button;\r\n    button = temp;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"settings-bg\">\r\n        <div id=\"settings\">\r\n          <span id=\"settings-close\" onClick={this.close}>\r\n            &times;\r\n          </span>\r\n          <Table borderless responsive=\"lg\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Speed</th>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn inactive\"\r\n                    onClick={() => this.changeSpeed(\"slow\", 0)}\r\n                  >\r\n                    Slow\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn active\"\r\n                    onClick={() => this.changeSpeed(\"med\", 1)}\r\n                  >\r\n                    Medium\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"speed-btn inactive\"\r\n                    onClick={() => this.changeSpeed(\"fast\", 2)}\r\n                  >\r\n                    Fast\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./GridSquare\";\r\nimport NavigationBar from \"./NavBar\";\r\n\r\nimport { bfs, dfs } from \"../Algorithms/UnweightedSearchAlgorithms\";\r\nimport { dijkstra, astar } from \"../Algorithms/WeightedSearchAlgorithms\";\r\nimport {\r\n  drawUnweightedShortestPath,\r\n  drawWeightedShortestPath,\r\n} from \"../Grid-Functions/PathDrawing\";\r\nimport Settings from \"./Settings\";\r\n\r\nconst gridRows = 25;\r\nconst gridCols = 72;\r\n\r\nvar unweightedStartNodeX = 5;\r\nvar unweightedStartNodeY = 12;\r\nvar unweightedEndNodeX = 66;\r\nvar unweightedEndNodeY = 12;\r\n\r\nvar weightedStartNodeX = 5;\r\nvar weightedStartNodeY = 12;\r\nvar weightedEndNodeX = 66;\r\nvar weightedEndNodeY = 12;\r\n\r\nexport default class Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mainGrid: [],\r\n      unweightedGrid: [],\r\n      weightedGrid: [],\r\n      currGrid: \"unweighted\",\r\n      algorithm: null,\r\n      speed: 20,\r\n    };\r\n\r\n    this.visualizeAlgorithm = this.visualizeAlgorithm.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // initialize grid\r\n    let grid = [];\r\n    for (let i = 0; i < gridRows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < gridCols; j++) {\r\n        let isStart = i === unweightedStartNodeY && j === unweightedStartNodeX,\r\n          isEnd = i === unweightedEndNodeY && j === unweightedEndNodeX,\r\n          className;\r\n        if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          isWall: false,\r\n          weight: null,\r\n          className: className,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ unweightedGrid: grid });\r\n    // set main grid to unweighted grid\r\n    this.setState({ mainGrid: grid });\r\n\r\n    // initialize weighted grid\r\n    grid = [];\r\n    for (let i = 0; i < gridRows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < gridCols; j++) {\r\n        let isStart = i === weightedStartNodeY && j === weightedStartNodeX,\r\n          isEnd = i === weightedEndNodeY && j === weightedEndNodeX,\r\n          className;\r\n        if (i === weightedStartNodeY && j === weightedStartNodeX) {\r\n          isStart = true;\r\n          className = \"grid-square start\";\r\n        } else if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n          isEnd = true;\r\n          className = \"grid-square end\";\r\n        } else {\r\n          className = \"grid-square unselected\";\r\n        }\r\n        grid[i].push({\r\n          isStart: isStart,\r\n          isEnd: isEnd,\r\n          y: i,\r\n          x: j,\r\n          id: i + \"-\" + j,\r\n          className: className,\r\n          weight: 0,\r\n        });\r\n      }\r\n    }\r\n    this.setState({ weightedGrid: grid });\r\n  }\r\n\r\n  handleClick(x, y) {\r\n    if (\r\n      (x === unweightedStartNodeX && y === unweightedStartNodeY) ||\r\n      (x === unweightedEndNodeX && y === unweightedEndNodeY)\r\n    ) {\r\n      return;\r\n    }\r\n    let newGrid = this.state.mainGrid.slice();\r\n    let node = newGrid[y][x];\r\n\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      const newSquare = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n        className: node.isWall\r\n          ? \"grid-square unselected\"\r\n          : \"grid-square selected\",\r\n      };\r\n      newGrid[y][x] = newSquare;\r\n    } else {\r\n      const newSquare = {\r\n        ...node,\r\n        weight: node.weight + 1 === 5 ? 0 : node.weight + 1,\r\n      };\r\n      newGrid[y][x] = newSquare;\r\n    }\r\n    this.setState({ mainGrid: newGrid });\r\n  }\r\n\r\n  ///////////////////////////// algorithm animations //////////////////////////////////////////////\r\n\r\n  /********************* Unweighted algorithms *********************/\r\n  animateBFS(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = bfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      drawUnweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateDFS(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = dfs(\r\n      grid,\r\n      unweightedStartNodeX,\r\n      unweightedStartNodeY,\r\n      unweightedEndNodeX,\r\n      unweightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      drawUnweightedShortestPath(\r\n        unweightedStartNodeX,\r\n        unweightedStartNodeY,\r\n        unweightedEndNodeX,\r\n        unweightedEndNodeY,\r\n        speed,\r\n        path\r\n      );\r\n    }, path.length * speed);\r\n  }\r\n\r\n  /********************* Weighted algorithms *********************/\r\n  animateDijkstra(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = dijkstra(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        // visited[i][0] = x coorinate, visited[i][1] = y coordiante\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      drawWeightedShortestPath(weightedEndNodeX, weightedEndNodeY, speed, path);\r\n    }, path.length * speed);\r\n  }\r\n\r\n  animateAstar(grid) {\r\n    document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"none\";\r\n    const path = astar(\r\n      grid,\r\n      weightedStartNodeX,\r\n      weightedStartNodeY,\r\n      weightedEndNodeX,\r\n      weightedEndNodeY\r\n    );\r\n\r\n    let speed = this.state.speed;\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let id = path[i][1] + \"-\" + path[i][0];\r\n        document.getElementById(id).className = \"grid-square visited\";\r\n      }, speed * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"grid\")[0].style.pointerEvents = \"auto\";\r\n      drawWeightedShortestPath(weightedEndNodeX, weightedEndNodeY, speed, path);\r\n    }, speed * path.length);\r\n  }\r\n\r\n  /////////////////// visualize button function //////////////////////////\r\n  visualizeAlgorithm() {\r\n    resetGrid();\r\n    const { algorithm, mainGrid } = this.state;\r\n    switch (algorithm) {\r\n      case \"BFS\":\r\n        this.animateBFS(mainGrid);\r\n        break;\r\n      case \"DFS\":\r\n        this.animateDFS(mainGrid);\r\n        break;\r\n      case \"Dijkstra's\":\r\n        this.animateDijkstra(mainGrid);\r\n        break;\r\n      case \"A*\":\r\n        this.animateAstar(mainGrid);\r\n        break;\r\n      default:\r\n        document.getElementById(\"popup\").style.display = \"block\";\r\n        break;\r\n    }\r\n  }\r\n\r\n  changeAlgorithm(key) {\r\n    this.setState({ algorithm: key });\r\n  }\r\n\r\n  changeSpeed(speed) {\r\n    if (speed === \"slow\") {\r\n      this.setState({ speed: 30 });\r\n    } else if (speed === \"med\") {\r\n      this.setState({ speed: 20 });\r\n    } else {\r\n      this.setState({ speed: 10 });\r\n    }\r\n  }\r\n\r\n  changeGrid(type) {\r\n    resetGrid();\r\n    if (type === \"weighted\" && this.state.currGrid === \"unweighted\") {\r\n      document.getElementById(unweightedStartNodeY + \"-\" + unweightedStartNodeX).classList.replace(\"start\", \"unselected\");\r\n      document.getElementById(unweightedEndNodeY + \"-\" + unweightedEndNodeX).classList.replace(\"end\", \"unselected\");\r\n      document\r\n        .getElementById(weightedStartNodeY + \"-\" + weightedStartNodeX)\r\n        .appendChild(document.getElementById(\"start\"));\r\n      document\r\n        .getElementById(weightedEndNodeY + \"-\" + weightedEndNodeX)\r\n        .appendChild(document.getElementById(\"end\"));\r\n\r\n      this.setState({\r\n        unweightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.weightedGrid,\r\n        currGrid: \"weighted\",\r\n      });\r\n    } else if (type === \"unweighted\" && this.state.currGrid === \"weighted\") {\r\n      document.getElementById(weightedStartNodeY + \"-\" + weightedStartNodeX).classList.replace(\"start\", \"unselected\");\r\n      document.getElementById(weightedEndNodeY + \"-\" + weightedEndNodeX).classList.replace(\"end\", \"unselected\");\r\n      document\r\n        .getElementById(unweightedStartNodeY + \"-\" + unweightedStartNodeX)\r\n        .appendChild(document.getElementById(\"start\"));\r\n      document\r\n        .getElementById(unweightedEndNodeY + \"-\" + unweightedEndNodeX)\r\n        .appendChild(document.getElementById(\"end\"));\r\n\r\n      this.setState({\r\n        weightedGrid: this.state.mainGrid,\r\n        mainGrid: this.state.unweightedGrid,\r\n        currGrid: \"unweighted\",\r\n      });\r\n    }\r\n  }\r\n\r\n  generateRandomGrid() {\r\n    let grid = this.state.mainGrid.slice();\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (\r\n            (i === unweightedStartNodeY && j === unweightedStartNodeX) ||\r\n            (i === unweightedEndNodeY && j === unweightedEndNodeX)\r\n          ) {\r\n            continue;\r\n          }\r\n          grid[i][j].isWall = Math.random() * 5 > 4;\r\n          grid[i][j].className = grid[i][j].isWall\r\n            ? \"grid-square selected\"\r\n            : \"grid-square unselected\";\r\n        }\r\n      }\r\n      if (this.state.currGrid === \"unweighted\") {\r\n        this.setState({ mainGrid: grid });\r\n      } else {\r\n        this.setState({ unweightedGrid: grid });\r\n      }\r\n    } else {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        for (let j = 0; j < gridCols; j++) {\r\n          if (i === weightedEndNodeY && j === weightedEndNodeX) {\r\n            grid[i][j].weight = 0;\r\n            continue;\r\n          }\r\n          grid[i][j].weight = Math.trunc(Math.random() * 5);\r\n        }\r\n      }\r\n      if (this.state.currGrid === \"weighted\") {\r\n        this.setState({ mainGrid: grid });\r\n      } else {\r\n        this.setState({ weightedGrid: grid });\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWeightsAndWalls() {\r\n    let grid = [];\r\n    if (this.state.currGrid === \"unweighted\") {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < gridCols; j++) {\r\n          let isStart =\r\n              i === unweightedStartNodeY && j === unweightedStartNodeX,\r\n            isEnd = i === unweightedEndNodeY && j === unweightedEndNodeX,\r\n            className;\r\n          if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n            isStart = true;\r\n            className = \"grid-square start\";\r\n          } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n            isEnd = true;\r\n            className = \"grid-square end\";\r\n          } else {\r\n            className = \"grid-square unselected\";\r\n          }\r\n          grid[i].push({\r\n            isStart: isStart,\r\n            isEnd: isEnd,\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isWall: false,\r\n            weight: 0,\r\n            className: className,\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < gridRows; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < gridCols; j++) {\r\n          let isStart =\r\n              i === unweightedStartNodeY && j === unweightedStartNodeX,\r\n            isEnd = i === unweightedEndNodeY && j === unweightedEndNodeX,\r\n            className;\r\n          if (i === unweightedStartNodeY && j === unweightedStartNodeX) {\r\n            isStart = true;\r\n            className = \"grid-square start\";\r\n          } else if (i === unweightedEndNodeY && j === unweightedEndNodeX) {\r\n            isEnd = true;\r\n            className = \"grid-square end\";\r\n          } else {\r\n            className = \"grid-square unselected\";\r\n          }\r\n          grid[i].push({\r\n            isStart: isStart,\r\n            isEnd: isEnd,\r\n            y: i,\r\n            x: j,\r\n            id: i + \"-\" + j,\r\n            isWall: false,\r\n            weight: null,\r\n            className: className,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    this.setState({ mainGrid: grid });\r\n  }\r\n\r\n  // Render ///////////////////////////////////////////////////\r\n  render() {\r\n    const { mainGrid } = this.state;\r\n    return (\r\n      <div className=\"grid\" align=\"center\">\r\n        <Settings changeSpeed={(speed) => this.changeSpeed(speed)} />\r\n        <NavigationBar\r\n          onClick={this.visualizeAlgorithm}\r\n          changeAlgorithm={(key) => this.changeAlgorithm(key)}\r\n          changeGrid={(type) => this.changeGrid(type)}\r\n          algorithm={this.state.algorithm}\r\n          generateNewGrid={() => this.generateRandomGrid()}\r\n          clearWeightsAndWalls={() => this.clearWeightsAndWalls()}\r\n        />\r\n        {mainGrid.map((row, key) => {\r\n          return (\r\n            <div className=\"grid-row\" key={key}>\r\n              {row.map((node, key) => {\r\n                return (\r\n                  <Square\r\n                    {...node}\r\n                    handleClick={(j, i) => this.handleClick(j, i)}\r\n                    drag={drag(node.id)}\r\n                    drop={drop(node.id, this.state.currGrid)}\r\n                    key={key}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// JavaScript functions\r\n\r\nconst resetGrid = () => {\r\n  for (let i = 0; i < gridRows; i++) {\r\n    for (let j = 0; j < gridCols; j++) {\r\n      // set visited nodes to blank nodes\r\n      let node = document.getElementById(i + \"-\" + j);\r\n      if (\r\n        node.classList.contains(\"visited\") ||\r\n        node.classList.contains(\"shortestpath\")\r\n      ) {\r\n        node.className = \"grid-square unselected\";\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// drag and drop functions\r\nconst drag = (id) => (e) => {\r\n  let data = [e.target.id, id];\r\n  e.dataTransfer.setData(\"data\", JSON.stringify(data));\r\n};\r\n\r\nconst drop = (id, grid) => (e) => {\r\n  e.preventDefault();\r\n  let data = JSON.parse(e.dataTransfer.getData(\"data\"));\r\n  let stringStartId = String(data[1]),\r\n    stringEndId = String(id);\r\n  e.target.appendChild(document.getElementById(data[0]));\r\n  let y = parseInt(stringEndId.substring(0, stringEndId.indexOf(\"-\"))),\r\n    x = parseInt(\r\n      stringEndId.substring(stringEndId.indexOf(\"-\") + 1, stringEndId.length)\r\n    );\r\n\r\n  if (grid === \"unweighted\") {\r\n    if (data[0] === \"start\") {\r\n      unweightedStartNodeX = x;\r\n      unweightedStartNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square start\";\r\n    } else {\r\n      unweightedEndNodeX = x;\r\n      unweightedEndNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square end\";\r\n    }\r\n    document\r\n      .getElementById(stringStartId)\r\n      .classList.replace(\"end\", \"unselected\");\r\n  } else {\r\n    if (data[0] === \"start\") {\r\n      weightedStartNodeX = x;\r\n      weightedStartNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square start\";\r\n    } else {\r\n      weightedEndNodeX = x;\r\n      weightedEndNodeY = y;\r\n      document.getElementById(stringEndId).className = \"grid-square end\";\r\n    }\r\n    document\r\n      .getElementById(stringStartId)\r\n      .classList.replace(\"end\", \"unselected\");\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nexport default class Popup extends React.Component {\r\n\r\n  onClick() {\r\n    document.getElementById(\"popup\").style.display = \"none\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"popup\">\r\n        <div id=\"popup-text\">\r\n          You have not selected an algorithm <span id=\"close\" onClick={this.onClick}>&times;</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import './App.css';\n\nimport Grid from './Components/Grid';\nimport Popup from \"./Components/PopupWarning\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Popup />\n      <Grid/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}